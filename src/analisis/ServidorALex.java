/* The following code was generated by JFlex 1.4.3 on 22/03/14 01:47 PM */

package analisis;
import java_cup.runtime.Symbol;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22/03/14 01:47 PM from the specification file
 * <tt>ServidorALex.jflex</tt>
 */
public class ServidorALex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int A = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\35\1\2\1\0\2\35\22\0\1\35\1\0\1\1\11\0"+
    "\1\5\2\0\1\13\14\0\1\4\1\34\1\3\2\0\1\15\1\23"+
    "\1\20\1\27\1\7\1\17\1\30\1\21\1\10\1\33\1\0\1\24"+
    "\1\22\1\12\1\11\1\31\1\0\1\16\1\6\1\26\1\14\1\25"+
    "\10\0\1\32\1\0\1\15\1\23\1\20\1\27\1\7\1\17\1\30"+
    "\1\21\1\10\1\33\1\0\1\24\1\22\1\12\1\11\1\31\1\0"+
    "\1\16\1\6\1\26\1\14\1\25\uff89\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\10\1\1\4\1\5\1\0"+
    "\1\6\1\3\15\0\1\7\7\0\1\10\1\0\1\3"+
    "\33\0\1\11\11\0\1\12\46\0\1\13\3\0\1\14"+
    "\1\15\27\0\1\16\20\0\1\17\1\0\1\20\35\0"+
    "\1\21\1\0\1\22\2\0\1\23\10\0\1\24\1\0"+
    "\1\25\1\26\1\27\23\0\1\30\6\0\1\31\2\0"+
    "\1\32\1\33\1\34\13\0\1\35\1\0\1\36\2\0"+
    "\1\37\1\0\1\40\1\0\1\41\1\42\3\0\1\43"+
    "\1\44\1\0\1\45\2\0\1\46\1\0\1\47\1\0"+
    "\1\50\1\51\1\52\1\0\1\53\4\0\1\54\7\0"+
    "\1\55\1\0\1\56\2\0\1\57\1\0\1\60\1\0"+
    "\1\61\2\0\1\62\1\0\1\63\1\64\1\65\1\0"+
    "\1\66\1\67\1\70\1\71\5\0\1\72\1\73\5\0"+
    "\1\74\1\0\1\75\2\0\1\76\1\77\7\0\1\100"+
    "\1\101\1\0\1\102\5\0\1\103\1\0\1\104\2\0"+
    "\1\105\2\0\1\106\2\0\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\36\0\74\0\36\0\132\0\170\0\226\0\264"+
    "\0\322\0\360\0\u010e\0\u012c\0\u014a\0\36\0\u0168\0\74"+
    "\0\36\0\u0186\0\u01a4\0\u01c2\0\u01e0\0\u01fe\0\u021c\0\u023a"+
    "\0\u0258\0\u0276\0\u0294\0\u02b2\0\u02d0\0\u02ee\0\u030c\0\36"+
    "\0\u032a\0\u0348\0\u0366\0\u0384\0\u03a2\0\u03c0\0\u03de\0\36"+
    "\0\u03fc\0\u041a\0\u0438\0\u0456\0\u0474\0\u0492\0\u04b0\0\u04ce"+
    "\0\u04ec\0\u050a\0\u0528\0\u0546\0\u0564\0\u0582\0\u05a0\0\u05be"+
    "\0\u05dc\0\u05fa\0\u0618\0\u0636\0\u0654\0\u0672\0\u0690\0\u06ae"+
    "\0\u06cc\0\u06ea\0\u0708\0\u0726\0\u0744\0\u0762\0\u0780\0\u079e"+
    "\0\u07bc\0\u07da\0\u07f8\0\u0816\0\u0834\0\u0852\0\u0870\0\u041a"+
    "\0\u088e\0\u08ac\0\u08ca\0\u08e8\0\u0906\0\u0924\0\u0942\0\u0960"+
    "\0\u097e\0\u099c\0\u09ba\0\u09d8\0\u09f6\0\u0a14\0\u0a32\0\u0a50"+
    "\0\u0a6e\0\u0a8c\0\u0aaa\0\u0ac8\0\u0ae6\0\u0b04\0\u0b22\0\u0b40"+
    "\0\u0b5e\0\u0b7c\0\u0b9a\0\u0bb8\0\u0bd6\0\u0bf4\0\u0c12\0\u0c30"+
    "\0\u0c4e\0\u0c6c\0\u0c8a\0\u0ca8\0\u0cc6\0\u0ce4\0\36\0\u0d02"+
    "\0\u0d20\0\u0d3e\0\36\0\36\0\u0d5c\0\u0d7a\0\u0d98\0\u0db6"+
    "\0\u0dd4\0\u0df2\0\u0e10\0\u0e2e\0\u0e4c\0\u0e6a\0\u0e88\0\u0ea6"+
    "\0\u0ec4\0\u0ee2\0\u0f00\0\u0f1e\0\u0f3c\0\u0f5a\0\u0f78\0\u0f96"+
    "\0\u0fb4\0\u0fd2\0\u0ff0\0\36\0\u100e\0\u102c\0\u104a\0\u1068"+
    "\0\u1086\0\u10a4\0\u10c2\0\u10e0\0\u10fe\0\u111c\0\u113a\0\u1158"+
    "\0\u1176\0\u1194\0\u11b2\0\u11d0\0\36\0\u11ee\0\36\0\u120c"+
    "\0\u122a\0\u1248\0\u1266\0\u1284\0\u12a2\0\u12c0\0\u12de\0\u12fc"+
    "\0\u131a\0\u1338\0\u1356\0\u1374\0\u1392\0\u13b0\0\u13ce\0\u13ec"+
    "\0\u140a\0\u1428\0\u1446\0\u1464\0\u1482\0\u14a0\0\u14be\0\u14dc"+
    "\0\u14fa\0\u1518\0\u1536\0\u1554\0\36\0\u1572\0\36\0\u1590"+
    "\0\u15ae\0\36\0\u15cc\0\u15ea\0\u1608\0\u1626\0\u1644\0\u1662"+
    "\0\u1680\0\u169e\0\36\0\u16bc\0\36\0\36\0\36\0\u16da"+
    "\0\u16f8\0\u1716\0\u1734\0\u1752\0\u1770\0\u178e\0\u17ac\0\u17ca"+
    "\0\u17e8\0\u1806\0\u1824\0\u1842\0\u1860\0\u187e\0\u189c\0\u18ba"+
    "\0\u18d8\0\u18f6\0\36\0\u1914\0\u1932\0\u1950\0\u196e\0\u198c"+
    "\0\u19aa\0\36\0\u19c8\0\u19e6\0\36\0\36\0\36\0\u1a04"+
    "\0\u1a22\0\u1a40\0\u1a5e\0\u1a7c\0\u1a9a\0\u1ab8\0\u1ad6\0\u1af4"+
    "\0\u1b12\0\u1b30\0\36\0\u1b4e\0\36\0\u1b6c\0\u1b8a\0\36"+
    "\0\u1ba8\0\36\0\u1bc6\0\u1be4\0\u1c02\0\u1c20\0\u1c3e\0\u1c5c"+
    "\0\36\0\36\0\u1c7a\0\36\0\u1c98\0\u1cb6\0\36\0\u1cd4"+
    "\0\36\0\u1cf2\0\36\0\36\0\36\0\u1d10\0\36\0\u1d2e"+
    "\0\u1d4c\0\u1d6a\0\u1d88\0\36\0\u1da6\0\u1dc4\0\u1de2\0\u1e00"+
    "\0\u1e1e\0\u1e3c\0\u1e5a\0\36\0\u1e78\0\36\0\u1e96\0\u1eb4"+
    "\0\u1ed2\0\u1ef0\0\36\0\u1f0e\0\36\0\u1f2c\0\u1f4a\0\36"+
    "\0\u1f68\0\36\0\36\0\36\0\u1f86\0\36\0\36\0\36"+
    "\0\36\0\u1fa4\0\u1fc2\0\u1fe0\0\u1ffe\0\u201c\0\36\0\36"+
    "\0\u203a\0\u2058\0\u2076\0\u2094\0\u20b2\0\36\0\u20d0\0\36"+
    "\0\u20ee\0\u210c\0\36\0\36\0\u212a\0\u2148\0\u2166\0\u2184"+
    "\0\u21a2\0\u21c0\0\u21de\0\u21fc\0\36\0\u221a\0\36\0\u2238"+
    "\0\u2256\0\u2274\0\u2292\0\u22b0\0\36\0\u22ce\0\36\0\u22ec"+
    "\0\u230a\0\36\0\u2328\0\u2346\0\36\0\u2364\0\u2382\0\36";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\3\2\1\7\3\2"+
    "\1\10\2\2\1\11\1\12\5\2\1\13\1\14\1\2"+
    "\1\15\2\2\1\16\1\17\36\0\1\20\1\21\1\0"+
    "\33\20\4\22\1\0\31\22\6\0\1\23\1\24\2\0"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\0"+
    "\1\34\1\0\1\35\2\0\1\36\20\0\1\37\14\0"+
    "\1\40\14\0\1\41\36\0\1\42\1\43\1\44\35\0"+
    "\1\45\34\0\1\46\4\0\1\47\27\0\1\50\35\0"+
    "\1\51\63\0\1\17\4\22\1\0\1\52\30\22\7\0"+
    "\1\53\1\0\1\54\32\0\1\55\13\0\1\56\24\0"+
    "\1\57\32\0\1\60\1\61\2\0\1\62\1\0\1\63"+
    "\1\64\1\65\1\66\1\67\1\0\1\70\1\0\1\71"+
    "\2\0\1\72\14\0\1\73\35\0\1\74\7\0\1\75"+
    "\26\0\1\76\35\0\1\77\1\0\1\100\33\0\1\101"+
    "\1\0\1\102\12\0\1\103\20\0\1\104\37\0\1\105"+
    "\33\0\1\106\34\0\1\107\43\0\1\110\41\0\1\111"+
    "\41\0\1\112\27\0\1\113\43\0\1\114\42\0\1\115"+
    "\26\0\1\116\41\0\1\117\7\0\4\120\1\0\31\120"+
    "\6\0\1\121\53\0\1\122\37\0\1\123\17\0\1\124"+
    "\47\0\1\125\22\0\1\126\1\0\1\127\32\0\1\130"+
    "\13\0\1\131\24\0\1\132\32\0\1\133\35\0\1\134"+
    "\7\0\1\135\26\0\1\136\35\0\1\137\1\0\1\140"+
    "\33\0\1\141\1\0\1\142\12\0\1\143\20\0\1\144"+
    "\37\0\1\145\33\0\1\146\42\0\1\147\35\0\1\150"+
    "\41\0\1\151\23\0\1\152\47\0\1\153\33\0\1\154"+
    "\43\0\1\155\23\0\1\156\3\0\1\157\34\0\1\160"+
    "\32\0\1\161\53\0\1\162\13\0\1\163\55\0\1\164"+
    "\24\0\1\165\41\0\1\166\31\0\1\167\42\0\1\170"+
    "\24\0\1\171\2\0\1\172\32\0\1\173\41\0\1\174"+
    "\30\0\1\175\35\0\1\176\35\0\1\177\42\0\1\200"+
    "\26\0\1\201\52\0\1\202\20\0\1\203\53\0\1\204"+
    "\37\0\1\205\17\0\1\206\47\0\1\207\27\0\1\210"+
    "\35\0\1\211\41\0\1\212\23\0\1\213\47\0\1\214"+
    "\33\0\1\215\43\0\1\216\23\0\1\217\3\0\1\220"+
    "\34\0\1\221\32\0\1\222\53\0\1\223\10\0\1\224"+
    "\2\0\1\225\44\0\1\226\32\0\1\227\44\0\1\230"+
    "\45\0\1\231\25\0\1\232\36\0\1\233\42\0\1\234"+
    "\34\0\1\235\25\0\1\236\44\0\1\237\16\0\1\240"+
    "\37\0\1\241\53\0\1\242\25\0\1\243\35\0\1\244"+
    "\34\0\1\245\34\0\1\246\37\0\1\247\41\0\1\250"+
    "\33\0\1\251\26\0\1\252\44\0\1\253\44\0\1\254"+
    "\17\0\1\255\42\0\1\256\27\0\1\257\35\0\1\260"+
    "\42\0\1\261\26\0\1\262\52\0\1\263\27\0\1\264"+
    "\32\0\1\265\44\0\1\266\45\0\1\267\25\0\1\270"+
    "\36\0\1\271\42\0\1\272\34\0\1\273\25\0\1\274"+
    "\44\0\1\275\16\0\1\276\37\0\1\277\53\0\1\300"+
    "\25\0\1\301\45\0\1\302\17\0\1\303\41\0\1\304"+
    "\36\0\1\305\34\0\1\306\36\0\1\307\27\0\1\310"+
    "\35\0\1\311\35\0\1\312\43\0\1\313\32\0\1\314"+
    "\33\0\1\315\41\0\1\316\31\0\1\317\51\0\1\320"+
    "\23\0\1\321\33\0\1\322\37\0\1\323\33\0\1\324"+
    "\36\0\1\325\42\0\1\326\26\0\1\327\37\0\1\330"+
    "\44\0\1\331\44\0\1\332\17\0\1\333\42\0\1\334"+
    "\35\0\1\335\45\0\1\336\17\0\1\337\41\0\1\340"+
    "\36\0\1\341\34\0\1\342\36\0\1\343\27\0\1\344"+
    "\35\0\1\345\35\0\1\346\43\0\1\347\32\0\1\350"+
    "\33\0\1\351\35\0\1\352\36\0\1\353\51\0\1\354"+
    "\17\0\1\355\52\0\1\356\23\0\1\357\34\0\1\360"+
    "\57\0\1\361\5\0\1\362\44\0\1\363\43\0\1\364"+
    "\26\0\1\365\41\0\1\366\35\0\1\367\31\0\1\370"+
    "\52\0\1\371\21\0\1\372\33\0\1\373\36\0\1\374"+
    "\42\0\1\375\26\0\1\376\36\0\1\377\36\0\1\u0100"+
    "\51\0\1\u0101\17\0\1\u0102\31\0\1\u0103\56\0\1\u0104"+
    "\14\0\1\u0105\44\0\1\u0106\34\0\1\u0107\27\0\1\u0108"+
    "\65\0\1\u0109\5\0\1\u010a\44\0\1\u010b\34\0\1\u010c"+
    "\35\0\1\u010d\32\0\1\u010e\44\0\1\u010f\30\0\1\u0110"+
    "\30\0\1\u0111\2\0\1\u0112\36\0\1\u0113\37\0\1\u0114"+
    "\3\0\1\u0115\40\0\1\u0116\27\0\1\u0117\37\0\1\u0118"+
    "\24\0\1\u0119\60\0\1\u011a\12\0\1\u011b\35\0\1\u011c"+
    "\35\0\1\u011d\43\0\1\u011e\27\0\1\u011f\43\0\1\u0120"+
    "\32\0\1\u0121\44\0\1\u0122\30\0\1\u0123\30\0\1\u0124"+
    "\2\0\1\u0125\36\0\1\u0126\37\0\1\u0127\3\0\1\u0128"+
    "\26\0\1\u0129\35\0\1\u012a\55\0\1\u012b\12\0\1\u012c"+
    "\61\0\1\u012d\11\0\1\u012e\60\0\1\u012f\17\0\1\u0130"+
    "\54\0\1\u0131\22\0\1\u0132\24\0\1\u0133\2\0\1\u0134"+
    "\32\0\1\u0135\2\0\1\u0136\55\0\1\u0137\12\0\1\u0138"+
    "\61\0\1\u0139\11\0\1\u013a\35\0\1\u013b\35\0\1\u013c"+
    "\60\0\1\u013d\12\0\1\u013e\35\0\1\u013f\47\0\1\u0140"+
    "\31\0\1\u0141\41\0\1\u0142\31\0\1\u0143\33\0\1\u0144"+
    "\22\0\1\u0145\32\0\1\u0146\11\0\1\u0147\35\0\1\u0148"+
    "\47\0\1\u0149\31\0\1\u014a\41\0\1\u014b\36\0\1\u014c"+
    "\31\0\1\u014d\31\0\1\u014e\44\0\1\u014f\23\0\1\u0150"+
    "\3\0\1\u0151\22\0\1\u0152\6\0\1\u0153\35\0\1\u0154"+
    "\50\0\1\u0155\27\0\1\u0156\34\0\1\u0157\50\0\1\u0158"+
    "\21\0\1\u0159\44\0\1\u015a\30\0\1\u015b\36\0\1\u015c"+
    "\32\0\1\u015d\37\0\1\u015e\30\0\1\u015f\54\0\1\u0160"+
    "\24\0\1\u0161\32\0\1\u0162\35\0\1\u0163\37\0\1\u0164"+
    "\30\0\1\u0165\2\0\1\u0166\32\0\1\u0167\60\0\1\u0168"+
    "\15\0\1\u0169\32\0\1\u016a\47\0\1\u016b\46\0\1\u016c"+
    "\36\0\1\u016d\23\0\1\u016e\47\0\1\u016f\11\0\1\u0170"+
    "\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9120];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\1\11\1\1\1\0"+
    "\1\11\1\1\15\0\1\11\7\0\1\11\1\0\1\1"+
    "\33\0\1\1\11\0\1\1\46\0\1\11\3\0\2\11"+
    "\27\0\1\11\20\0\1\11\1\0\1\11\35\0\1\11"+
    "\1\0\1\11\2\0\1\11\10\0\1\11\1\0\3\11"+
    "\23\0\1\11\6\0\1\11\2\0\3\11\13\0\1\11"+
    "\1\0\1\11\2\0\1\11\1\0\1\11\1\0\2\1"+
    "\3\0\2\11\1\0\1\11\2\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\11\4\0\1\11\7\0\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\1\11\1\0\1\11"+
    "\2\0\1\11\1\0\3\11\1\0\4\11\5\0\2\11"+
    "\5\0\1\11\1\0\1\11\2\0\2\11\7\0\1\1"+
    "\1\11\1\0\1\11\5\0\1\11\1\0\1\11\2\0"+
    "\1\11\2\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[368];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ServidorALex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ServidorALex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 132) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 64: 
          { return new Symbol(SymServidorA.tsdestinatario, yychar, yyline ,new String(yytext()));
          }
        case 72: break;
        case 37: 
          { return new Symbol(SymServidorA.tsdestino, yychar, yyline ,new String(yytext()));
          }
        case 73: break;
        case 43: 
          { return new Symbol(SymServidorA.teasunto, yychar, yyline ,new String(yytext()));
          }
        case 74: break;
        case 33: 
          { return new Symbol(SymServidorA.tsusuario, yychar, yyline ,new String(yytext()));
          }
        case 75: break;
        case 3: 
          { return new Symbol(SymServidorA.tcadcampo, yychar,yyline,new String(yytext().substring(1, yytext().length()-1)));
          }
        case 76: break;
        case 29: 
          { return new Symbol(SymServidorA.tefecha, yychar, yyline ,new String(yytext()));
          }
        case 77: break;
        case 69: 
          { return new Symbol(SymServidorA.tedestinatarios, yychar, yyline ,new String(yytext()));
          }
        case 78: break;
        case 65: 
          { return new Symbol(SymServidorA.tinstrucciones, yychar, yyline ,new String(yytext()));
          }
        case 79: break;
        case 51: 
          { return new Symbol(SymServidorA.tecorreos, yychar, yyline ,new String(yytext()));
          }
        case 80: break;
        case 7: 
          { return new Symbol(SymServidorA.tid, yychar, yyline ,new String(yytext()));
          }
        case 81: break;
        case 50: 
          { return new Symbol(SymServidorA.teformula, yychar, yyline ,new String(yytext()));
          }
        case 82: break;
        case 15: 
          { return new Symbol(SymServidorA.tfecha, yychar, yyline ,new String(yytext()));
          }
        case 83: break;
        case 71: 
          { return new Symbol(SymServidorA.tesolicitudamistad, yychar, yyline ,new String(yytext()));
          }
        case 84: break;
        case 28: 
          { return new Symbol(SymServidorA.tcolumna, yychar, yyline ,new String(yytext()));
          }
        case 85: break;
        case 20: 
          { return new Symbol(SymServidorA.tssesion, yychar, yyline ,new String(yytext()));
          }
        case 86: break;
        case 70: 
          { return new Symbol(SymServidorA.tssolicitudamistad, yychar, yyline ,new String(yytext()));
          }
        case 87: break;
        case 32: 
          { return new Symbol(SymServidorA.telogin, yychar, yyline ,new String(yytext()));
          }
        case 88: break;
        case 13: 
          { return new Symbol(SymServidorA.ttama, yychar, yyline ,new String(yytext()));
          }
        case 89: break;
        case 26: 
          { return new Symbol(SymServidorA.tusuario, yychar, yyline ,new String(yytext()));
          }
        case 90: break;
        case 46: 
          { return new Symbol(SymServidorA.tsmensaje, yychar, yyline ,new String(yytext()));
          }
        case 91: break;
        case 22: 
          { return new Symbol(SymServidorA.tsemisor, yychar, yyline ,new String(yytext()));
          }
        case 92: break;
        case 19: 
          { return new Symbol(SymServidorA.tsclave, yychar, yyline ,new String(yytext()));
          }
        case 93: break;
        case 1: 
          { /** rojo **/
                                /** Metodos.agregarErrorLexico( "Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar); **/
                                /**Metodos.addError("lexico", yyline, yychar, "Caracter no reconocido: " + yytext());**/
                                System.out.println("Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar);
          }
        case 94: break;
        case 53: 
          { return new Symbol(SymServidorA.tedestino, yychar, yyline ,new String(yytext()));
          }
        case 95: break;
        case 14: 
          { return new Symbol(SymServidorA.tede, yychar, yyline ,new String(yytext()));
          }
        case 96: break;
        case 48: 
          { return new Symbol(SymServidorA.teusuario, yychar, yyline ,new String(yytext()));
          }
        case 97: break;
        case 34: 
          { return new Symbol(SymServidorA.tsarchivo, yychar, yyline ,new String(yytext()));
          }
        case 98: break;
        case 68: 
          { return new Symbol(SymServidorA.tsdestinatarios, yychar, yyline ,new String(yytext()));
          }
        case 99: break;
        case 23: 
          { return new Symbol(SymServidorA.tsnombre, yychar, yyline ,new String(yytext()));
          }
        case 100: break;
        case 35: 
          { return new Symbol(SymServidorA.tscorreo, yychar, yyline ,new String(yytext()));
          }
        case 101: break;
        case 58: 
          { return new Symbol(SymServidorA.teusuarios, yychar, yyline ,new String(yytext()));
          }
        case 102: break;
        case 47: 
          { return new Symbol(SymServidorA.tssolicitud, yychar, yyline ,new String(yytext()));
          }
        case 103: break;
        case 16: 
          { return new Symbol(SymServidorA.tcolor, yychar, yyline ,new String(yytext()));
          }
        case 104: break;
        case 21: 
          { return new Symbol(SymServidorA.tsestado, yychar, yyline ,new String(yytext()));
          }
        case 105: break;
        case 61: 
          { return new Symbol(SymServidorA.tesolicitud, yychar, yyline ,new String(yytext()));
          }
        case 106: break;
        case 30: 
          { return new Symbol(SymServidorA.tecelda, yychar, yyline ,new String(yytext()));
          }
        case 107: break;
        case 55: 
          { return new Symbol(SymServidorA.tsarchivos, yychar, yyline ,new String(yytext()));
          }
        case 108: break;
        case 8: 
          { return new Symbol(SymServidorA.tde, yychar, yyline ,new String(yytext()));
          }
        case 109: break;
        case 9: 
          { return new Symbol(SymServidorA.tsde, yychar, yyline ,new String(yytext()));
          }
        case 110: break;
        case 11: 
          { return new Symbol(SymServidorA.tfila, yychar, yyline ,new String(yytext()));
          }
        case 111: break;
        case 60: 
          { return new Symbol(SymServidorA.tssolicitudes, yychar, yyline ,new String(yytext()));
          }
        case 112: break;
        case 52: 
          { return new Symbol(SymServidorA.temensaje, yychar, yyline ,new String(yytext()));
          }
        case 113: break;
        case 39: 
          { return new Symbol(SymServidorA.tesesion, yychar, yyline ,new String(yytext()));
          }
        case 114: break;
        case 38: 
          { return new Symbol(SymServidorA.tpeticion, yychar, yyline ,new String(yytext()));
          }
        case 115: break;
        case 12: 
          { return new Symbol(SymServidorA.ttipo, yychar, yyline ,new String(yytext()));
          }
        case 116: break;
        case 10: 
          { return new Symbol(SymServidorA.tfechacadena, yychar,yyline,new String(yytext()));
          }
        case 117: break;
        case 49: 
          { return new Symbol(SymServidorA.tearchivo, yychar, yyline ,new String(yytext()));
          }
        case 118: break;
        case 41: 
          { return new Symbol(SymServidorA.teemisor, yychar, yyline ,new String(yytext()));
          }
        case 119: break;
        case 17: 
          { return new Symbol(SymServidorA.tsfecha, yychar, yyline ,new String(yytext()));
          }
        case 120: break;
        case 4: 
          { return new Symbol(SymServidorA.tigual, yychar, yyline ,new String(yytext()));
          }
        case 121: break;
        case 2: 
          { yychar = 0;
          }
        case 122: break;
        case 25: 
          { return new Symbol(SymServidorA.tslogin, yychar, yyline ,new String(yytext()));
          }
        case 123: break;
        case 42: 
          { return new Symbol(SymServidorA.tenombre, yychar, yyline ,new String(yytext()));
          }
        case 124: break;
        case 24: 
          { return new Symbol(SymServidorA.tsasunto, yychar, yyline ,new String(yytext()));
          }
        case 125: break;
        case 67: 
          { return new Symbol(SymServidorA.tedestinatario, yychar, yyline ,new String(yytext()));
          }
        case 126: break;
        case 44: 
          { return new Symbol(SymServidorA.tecorreo, yychar, yyline ,new String(yytext()));
          }
        case 127: break;
        case 40: 
          { return new Symbol(SymServidorA.teestado, yychar, yyline ,new String(yytext()));
          }
        case 128: break;
        case 31: 
          { return new Symbol(SymServidorA.teclave, yychar, yyline ,new String(yytext()));
          }
        case 129: break;
        case 6: 
          { return new Symbol(SymServidorA.tcadena, yychar,yyline,new String(yytext().substring(1, yytext().length()-1)));
          }
        case 130: break;
        case 57: 
          { return new Symbol(SymServidorA.tscontenido, yychar, yyline ,new String(yytext()));
          }
        case 131: break;
        case 54: 
          { return new Symbol(SymServidorA.tsusuarios, yychar, yyline ,new String(yytext()));
          }
        case 132: break;
        case 36: 
          { return new Symbol(SymServidorA.tscorreos, yychar, yyline ,new String(yytext()));
          }
        case 133: break;
        case 63: 
          { return new Symbol(SymServidorA.tecontenido, yychar, yyline ,new String(yytext()));
          }
        case 134: break;
        case 45: 
          { return new Symbol(SymServidorA.tsformula, yychar, yyline ,new String(yytext()));
          }
        case 135: break;
        case 18: 
          { return new Symbol(SymServidorA.tscelda, yychar, yyline ,new String(yytext()));
          }
        case 136: break;
        case 5: 
          { /* Se ignoran */
          }
        case 137: break;
        case 56: 
          { return new Symbol(SymServidorA.tsrespuesta, yychar, yyline ,new String(yytext()));
          }
        case 138: break;
        case 66: 
          { return new Symbol(SymServidorA.tesolicitudes, yychar, yyline ,new String(yytext()));
          }
        case 139: break;
        case 62: 
          { return new Symbol(SymServidorA.terespuesta, yychar, yyline ,new String(yytext()));
          }
        case 140: break;
        case 59: 
          { return new Symbol(SymServidorA.tearchivos, yychar, yyline ,new String(yytext()));
          }
        case 141: break;
        case 27: 
          { return new Symbol(SymServidorA.tformula, yychar, yyline ,new String(yytext()));
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SymServidorA.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
