/* The following code was generated by JFlex 1.4.3 on 21/03/14 05:17 AM */

package analisis;
import java_cup.runtime.Symbol;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/03/14 05:17 AM from the specification file
 * <tt>ServidorALex.jflex</tt>
 */
public class ServidorALex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int A = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\3\1\0\2\40\22\0\1\40\1\0\1\2\11\0"+
    "\1\10\1\6\1\0\1\16\12\1\1\7\1\0\1\5\1\37\1\4"+
    "\2\0\1\20\1\26\1\23\1\32\1\12\1\22\1\33\1\24\1\13"+
    "\1\36\1\0\1\27\1\25\1\15\1\14\1\34\1\0\1\21\1\11"+
    "\1\31\1\17\1\30\10\0\1\35\1\0\1\20\1\26\1\23\1\32"+
    "\1\12\1\22\1\33\1\24\1\13\1\36\1\0\1\27\1\25\1\15"+
    "\1\14\1\34\1\0\1\21\1\11\1\31\1\17\1\30\uff89\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\3\1\4\7\1\1\5\1\6"+
    "\1\0\1\7\2\0\1\10\15\0\1\11\16\0\1\12"+
    "\124\0\1\13\3\0\1\14\1\15\47\0\1\16\1\0"+
    "\1\17\25\0\1\20\1\0\1\21\1\0\1\22\22\0"+
    "\1\23\1\0\1\24\1\25\1\26\12\0\1\27\5\0"+
    "\1\30\10\0\1\31\1\0\1\32\1\0\1\33\1\34"+
    "\10\0\1\35\1\0\1\36\1\0\1\37\1\40\6\0"+
    "\1\41\1\42\1\43\1\0\1\44\3\0\1\45\2\0"+
    "\1\46\11\0\1\47\1\0\1\50\2\0\1\51\7\0"+
    "\1\52\1\0\1\53\1\54\1\0\1\55\1\56\1\57"+
    "\1\60\10\0\1\61\1\62\3\0\1\63\1\64\14\0"+
    "\1\65\1\66\6\0\1\67\4\0\1\70\3\0\1\71"+
    "\7\0\1\72\2\0\1\73\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\41\0\143\0\204\0\245\0\306"+
    "\0\347\0\u0108\0\u0129\0\u014a\0\u016b\0\41\0\u018c\0\102"+
    "\0\41\0\u01ad\0\u01ce\0\41\0\u01ef\0\u0210\0\u0231\0\u0252"+
    "\0\u0273\0\u0294\0\u02b5\0\u02d6\0\u02f7\0\u0318\0\u0339\0\u035a"+
    "\0\u037b\0\41\0\u039c\0\u03bd\0\u03de\0\u03ff\0\u0420\0\u0441"+
    "\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u04e6\0\u0507\0\u0528\0\u0549"+
    "\0\41\0\u056a\0\u058b\0\u05ac\0\u05cd\0\u05ee\0\u060f\0\u0630"+
    "\0\u0651\0\u0672\0\u0693\0\u06b4\0\u06d5\0\u06f6\0\u0717\0\u0738"+
    "\0\u0759\0\u077a\0\u079b\0\u07bc\0\u07dd\0\u07fe\0\u081f\0\u0840"+
    "\0\u0861\0\u0882\0\u08a3\0\u08c4\0\u08e5\0\u0906\0\u0927\0\u0948"+
    "\0\u0969\0\u098a\0\u09ab\0\u09cc\0\u09ed\0\u0a0e\0\u0a2f\0\u0a50"+
    "\0\u0a71\0\u0a92\0\u0ab3\0\u0ad4\0\u0af5\0\u0b16\0\u0b37\0\u0b58"+
    "\0\u0b79\0\u0b9a\0\u0bbb\0\u0bdc\0\u0bfd\0\u0c1e\0\u0c3f\0\u0c60"+
    "\0\u0c81\0\u0ca2\0\u0cc3\0\u0ce4\0\u0d05\0\u0d26\0\u0d47\0\u0d68"+
    "\0\u0d89\0\u0daa\0\u0dcb\0\u0dec\0\u0e0d\0\u0e2e\0\u0e4f\0\u0e70"+
    "\0\u0e91\0\u0eb2\0\u0ed3\0\u0ef4\0\u0f15\0\u0f36\0\u0f57\0\u0f78"+
    "\0\u0f99\0\u0fba\0\u0fdb\0\u0ffc\0\u101d\0\41\0\u103e\0\u105f"+
    "\0\u1080\0\41\0\41\0\u10a1\0\u10c2\0\u10e3\0\u1104\0\u1125"+
    "\0\u1146\0\u1167\0\u1188\0\u11a9\0\u11ca\0\u11eb\0\u120c\0\u122d"+
    "\0\u124e\0\u126f\0\u1290\0\u12b1\0\u12d2\0\u12f3\0\u1314\0\u1335"+
    "\0\u1356\0\u1377\0\u1398\0\u13b9\0\u13da\0\u13fb\0\u141c\0\u143d"+
    "\0\u145e\0\u147f\0\u14a0\0\u14c1\0\u14e2\0\u1503\0\u1524\0\u1545"+
    "\0\u1566\0\u1587\0\41\0\u15a8\0\41\0\u15c9\0\u15ea\0\u160b"+
    "\0\u162c\0\u164d\0\u166e\0\u168f\0\u16b0\0\u16d1\0\u16f2\0\u1713"+
    "\0\u1734\0\u1755\0\u1776\0\u1797\0\u17b8\0\u17d9\0\u17fa\0\u181b"+
    "\0\u183c\0\u185d\0\41\0\u187e\0\41\0\u189f\0\41\0\u18c0"+
    "\0\u18e1\0\u1902\0\u1923\0\u1944\0\u1965\0\u1986\0\u19a7\0\u19c8"+
    "\0\u19e9\0\u1a0a\0\u1a2b\0\u1a4c\0\u1a6d\0\u1a8e\0\u1aaf\0\u1ad0"+
    "\0\u1af1\0\41\0\u1b12\0\41\0\41\0\41\0\u1b33\0\u1b54"+
    "\0\u1b75\0\u1b96\0\u1bb7\0\u1bd8\0\u1bf9\0\u1c1a\0\u1c3b\0\u1c5c"+
    "\0\41\0\u1c7d\0\u1c9e\0\u1cbf\0\u1ce0\0\u1d01\0\41\0\u1d22"+
    "\0\u1d43\0\u1d64\0\u1d85\0\u1da6\0\u1dc7\0\u1de8\0\u1e09\0\41"+
    "\0\u1e2a\0\41\0\u1e4b\0\41\0\41\0\u1e6c\0\u1e8d\0\u1eae"+
    "\0\u1ecf\0\u1ef0\0\u1f11\0\u1f32\0\u1f53\0\41\0\u1f74\0\41"+
    "\0\u1f95\0\u1fb6\0\u1fd7\0\u1ff8\0\u2019\0\u203a\0\u205b\0\u207c"+
    "\0\u209d\0\41\0\41\0\41\0\u20be\0\41\0\u20df\0\u2100"+
    "\0\u2121\0\41\0\u2142\0\u2163\0\41\0\u2184\0\u21a5\0\u21c6"+
    "\0\u21e7\0\u2208\0\u2229\0\u224a\0\u226b\0\u228c\0\41\0\u22ad"+
    "\0\41\0\u22ce\0\u22ef\0\41\0\u2310\0\u2331\0\u2352\0\u2373"+
    "\0\u2394\0\u23b5\0\u23d6\0\41\0\u23f7\0\41\0\41\0\u2418"+
    "\0\41\0\41\0\41\0\41\0\u2439\0\u245a\0\u247b\0\u249c"+
    "\0\u24bd\0\u24de\0\u24ff\0\u2520\0\41\0\41\0\u2541\0\u2562"+
    "\0\u2583\0\41\0\41\0\u25a4\0\u25c5\0\u25e6\0\u2607\0\u2628"+
    "\0\u2649\0\u266a\0\u268b\0\u26ac\0\u26cd\0\u26ee\0\u270f\0\u2730"+
    "\0\41\0\u2751\0\u2772\0\u2793\0\u27b4\0\u27d5\0\u27f6\0\41"+
    "\0\u2817\0\u2838\0\u2859\0\u287a\0\41\0\u289b\0\u28bc\0\u28dd"+
    "\0\41\0\u28fe\0\u291f\0\u2940\0\u2961\0\u2982\0\u29a3\0\u29c4"+
    "\0\41\0\u29e5\0\u2a06\0\41\0\41";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\5\2\1\7\2\2"+
    "\1\10\3\2\1\11\1\12\5\2\1\13\1\14\1\2"+
    "\1\15\2\2\1\16\1\17\41\0\2\20\1\21\1\0"+
    "\35\20\1\22\1\23\3\22\1\24\33\22\11\0\1\25"+
    "\1\26\2\0\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\0\1\36\1\0\1\37\2\0\1\40\23\0"+
    "\1\41\14\0\1\42\20\0\1\43\2\0\1\44\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\6\0\1\52\20\0"+
    "\1\53\1\54\1\55\40\0\1\56\37\0\1\57\4\0"+
    "\1\60\32\0\1\61\40\0\1\62\66\0\1\17\5\22"+
    "\1\24\34\22\1\63\3\22\1\24\33\22\12\0\1\64"+
    "\1\0\1\65\35\0\1\66\13\0\1\67\27\0\1\70"+
    "\35\0\1\71\5\0\1\72\1\73\1\0\1\74\1\75"+
    "\1\0\1\76\1\0\1\77\2\0\1\100\17\0\1\101"+
    "\40\0\1\102\7\0\1\103\31\0\1\104\40\0\1\105"+
    "\1\0\1\106\36\0\1\107\1\0\1\110\12\0\1\111"+
    "\23\0\1\112\42\0\1\113\36\0\1\114\37\0\1\115"+
    "\40\0\1\116\13\0\1\117\27\0\1\120\35\0\1\121"+
    "\40\0\1\122\41\0\1\123\40\0\1\124\42\0\1\125"+
    "\12\0\1\126\23\0\1\127\51\0\1\130\44\0\1\131"+
    "\32\0\1\132\46\0\1\133\45\0\1\134\31\0\1\135"+
    "\44\0\1\136\7\0\5\22\1\24\1\137\32\22\11\0"+
    "\1\140\56\0\1\141\42\0\1\142\22\0\1\143\52\0"+
    "\1\144\25\0\1\145\1\0\1\146\35\0\1\147\50\0"+
    "\1\150\33\0\1\151\36\0\1\152\40\0\1\153\42\0"+
    "\1\154\36\0\1\155\45\0\1\156\40\0\1\157\44\0"+
    "\1\160\26\0\1\161\52\0\1\162\36\0\1\163\46\0"+
    "\1\164\26\0\1\165\43\0\1\166\35\0\1\167\56\0"+
    "\1\170\16\0\1\171\60\0\1\172\40\0\1\173\22\0"+
    "\1\174\52\0\1\175\32\0\1\176\40\0\1\177\32\0"+
    "\1\200\52\0\1\201\32\0\1\202\43\0\1\203\31\0"+
    "\1\204\53\0\1\205\34\0\1\206\45\0\1\207\27\0"+
    "\1\210\2\0\1\211\35\0\1\212\44\0\1\213\33\0"+
    "\1\214\25\0\1\22\1\215\3\22\1\24\33\22\13\0"+
    "\1\216\40\0\1\217\45\0\1\220\31\0\1\221\55\0"+
    "\1\222\23\0\1\223\56\0\1\224\30\0\1\225\44\0"+
    "\1\226\36\0\1\227\46\0\1\230\26\0\1\231\56\0"+
    "\1\232\16\0\1\233\47\0\1\234\35\0\1\235\47\0"+
    "\1\236\50\0\1\237\30\0\1\240\41\0\1\241\45\0"+
    "\1\242\37\0\1\243\37\0\1\244\21\0\1\245\42\0"+
    "\1\246\56\0\1\247\30\0\1\250\37\0\1\251\31\0"+
    "\1\252\55\0\1\253\32\0\1\254\35\0\1\255\57\0"+
    "\1\256\30\0\1\257\45\0\1\260\37\0\1\261\41\0"+
    "\1\262\27\0\1\263\37\0\1\264\42\0\1\265\44\0"+
    "\1\266\36\0\1\267\15\0\1\22\1\270\3\22\1\24"+
    "\33\22\14\0\1\271\47\0\1\272\47\0\1\273\22\0"+
    "\1\274\45\0\1\275\32\0\1\276\40\0\1\277\45\0"+
    "\1\300\44\0\1\301\41\0\1\302\45\0\1\303\17\0"+
    "\1\304\42\0\1\305\56\0\1\306\30\0\1\307\50\0"+
    "\1\310\22\0\1\311\44\0\1\312\41\0\1\313\37\0"+
    "\1\314\41\0\1\315\32\0\1\316\40\0\1\317\46\0"+
    "\1\320\35\0\1\321\36\0\1\322\44\0\1\323\53\0"+
    "\1\324\22\0\1\325\45\0\1\326\40\0\1\327\50\0"+
    "\1\330\26\0\1\331\41\0\1\332\32\0\1\333\40\0"+
    "\1\334\41\0\1\335\54\0\1\336\26\0\1\337\36\0"+
    "\1\340\25\0\5\22\1\24\1\341\32\22\15\0\1\342"+
    "\36\0\1\343\41\0\1\344\45\0\1\345\31\0\1\346"+
    "\42\0\1\347\47\0\1\350\36\0\1\351\32\0\1\352"+
    "\44\0\1\353\41\0\1\354\40\0\1\355\35\0\1\356"+
    "\36\0\1\357\40\0\1\360\41\0\1\361\54\0\1\362"+
    "\22\0\1\363\55\0\1\364\26\0\1\365\61\0\1\366"+
    "\6\0\1\367\51\0\1\370\46\0\1\371\31\0\1\372"+
    "\45\0\1\373\31\0\1\374\41\0\1\375\41\0\1\376"+
    "\36\0\1\377\32\0\1\u0100\51\0\1\u0101\27\0\1\u0102"+
    "\51\0\1\u0103\43\0\1\u0104\40\0\1\u0105\34\0\1\u0106"+
    "\24\0\1\22\1\u0107\3\22\1\24\33\22\31\0\1\u0108"+
    "\24\0\1\u0109\36\0\1\u010a\40\0\1\u010b\55\0\1\u010c"+
    "\37\0\1\u010d\15\0\1\u010e\72\0\1\u010f\6\0\1\u0110"+
    "\51\0\1\u0111\37\0\1\u0112\40\0\1\u0113\35\0\1\u0114"+
    "\47\0\1\u0115\33\0\1\u0116\37\0\1\u0117\46\0\1\u0118"+
    "\43\0\1\u0119\21\0\1\u011a\40\0\1\u011b\40\0\1\u011c"+
    "\50\0\1\u011d\30\0\1\u011e\45\0\1\u011f\42\0\1\u0120"+
    "\45\0\1\u0121\35\0\1\u0122\23\0\1\22\1\u0123\3\22"+
    "\1\24\33\22\17\0\1\u0124\25\0\1\u0125\65\0\1\u0126"+
    "\23\0\1\u0127\40\0\1\u0128\44\0\1\u0129\32\0\1\u012a"+
    "\46\0\1\u012b\31\0\1\u012c\40\0\1\u012d\60\0\1\u012e"+
    "\13\0\1\u012f\66\0\1\u0130\12\0\1\u0131\65\0\1\u0132"+
    "\22\0\1\u0133\31\0\1\u0134\65\0\1\u0135\41\0\1\u0136"+
    "\37\0\1\u0137\7\0\1\22\1\u0138\3\22\1\24\33\22"+
    "\32\0\1\u0139\25\0\1\u013a\32\0\1\u013b\33\0\1\u013c"+
    "\4\0\1\u013d\33\0\1\u013e\40\0\1\u013f\65\0\1\u0140"+
    "\13\0\1\u0141\40\0\1\u0142\54\0\1\u0143\34\0\1\u0144"+
    "\44\0\1\u0145\34\0\1\u0146\44\0\1\u0147\34\0\1\u0148"+
    "\44\0\1\u0149\20\0\1\22\1\u014a\3\22\1\24\33\22"+
    "\35\0\1\u014b\35\0\1\u014c\12\0\1\u014d\40\0\1\u014e"+
    "\54\0\1\u014f\41\0\1\u0150\34\0\1\u0151\27\0\1\u0152"+
    "\40\0\1\u0153\55\0\1\u0154\17\0\5\22\1\24\2\22"+
    "\1\u0155\30\22\20\0\1\u0156\55\0\1\u0157\24\0\1\u0158"+
    "\32\0\1\u0159\37\0\1\u015a\41\0\1\u015b\25\0\1\22"+
    "\1\u015c\3\22\1\24\33\22\25\0\1\u015d\33\0\1\u015e"+
    "\33\0\1\u015f\41\0\1\u0160\35\0\1\u0161\43\0\1\u0162"+
    "\24\0\1\22\1\u0163\3\22\1\24\33\22\13\0\1\u0164"+
    "\52\0\1\u0165\27\0\1\u0166\35\0\1\u0167\33\0\1\u0168"+
    "\34\0\5\22\1\24\1\22\1\u0169\31\22\11\0\1\u016a"+
    "\42\0\1\u016b\36\0\1\u016c\33\0\1\u016d\34\0\1\22"+
    "\1\u016e\3\22\1\24\33\22\31\0\1\u016f\20\0\1\u0170"+
    "\33\0\1\u0171\34\0\1\22\1\u0172\3\22\1\24\33\22"+
    "\20\0\1\u0173\51\0\1\u0174\7\0\5\22\1\24\1\22"+
    "\1\u0175\31\22\32\0\1\u0176\26\0\1\u0177\20\0\1\22"+
    "\1\u0178\3\22\1\24\33\22\4\0\1\u0179\66\0\1\u017a"+
    "\6\0\1\22\1\u017b\3\22\1\24\33\22\4\0\1\u017c"+
    "\34\0\5\22\1\u017d\33\22";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10791];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\11\1\1\11\1\1\1\0"+
    "\1\11\2\0\1\11\15\0\1\11\16\0\1\11\124\0"+
    "\1\11\3\0\2\11\47\0\1\11\1\0\1\11\25\0"+
    "\1\11\1\0\1\11\1\0\1\11\22\0\1\11\1\0"+
    "\3\11\12\0\1\11\5\0\1\11\10\0\1\11\1\0"+
    "\1\11\1\0\2\11\10\0\1\11\1\0\1\11\1\0"+
    "\2\1\6\0\3\11\1\0\1\11\3\0\1\11\2\0"+
    "\1\11\11\0\1\11\1\0\1\11\2\0\1\11\7\0"+
    "\1\11\1\0\2\11\1\0\4\11\10\0\2\11\3\0"+
    "\2\11\14\0\1\1\1\11\6\0\1\11\4\0\1\11"+
    "\3\0\1\11\7\0\1\11\2\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[381];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ServidorALex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ServidorALex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 138) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 53: 
          { return new Symbol(SymServidorA.tsdestinatario, yychar, yyline ,new String(yytext()));
          }
        case 61: break;
        case 36: 
          { return new Symbol(SymServidorA.teasunto, yychar, yyline ,new String(yytext()));
          }
        case 62: break;
        case 31: 
          { return new Symbol(SymServidorA.tsusuario, yychar, yyline ,new String(yytext()));
          }
        case 63: break;
        case 8: 
          { return new Symbol(SymServidorA.tcadcampo, yychar,yyline,new String(yytext().substring(1, yytext().length()-1)));
          }
        case 64: break;
        case 25: 
          { return new Symbol(SymServidorA.tefecha, yychar, yyline ,new String(yytext()));
          }
        case 65: break;
        case 57: 
          { return new Symbol(SymServidorA.tedestinatarios, yychar, yyline ,new String(yytext()));
          }
        case 66: break;
        case 54: 
          { return new Symbol(SymServidorA.tinstrucciones, yychar, yyline ,new String(yytext()));
          }
        case 67: break;
        case 9: 
          { return new Symbol(SymServidorA.tid, yychar, yyline ,new String(yytext()));
          }
        case 68: break;
        case 43: 
          { return new Symbol(SymServidorA.teformula, yychar, yyline ,new String(yytext()));
          }
        case 69: break;
        case 14: 
          { return new Symbol(SymServidorA.tfecha, yychar, yyline ,new String(yytext()));
          }
        case 70: break;
        case 59: 
          { return new Symbol(SymServidorA.tesolicitudamistad, yychar, yyline ,new String(yytext()));
          }
        case 71: break;
        case 28: 
          { return new Symbol(SymServidorA.tcolumna, yychar, yyline ,new String(yytext()));
          }
        case 72: break;
        case 19: 
          { return new Symbol(SymServidorA.tssesion, yychar, yyline ,new String(yytext()));
          }
        case 73: break;
        case 58: 
          { return new Symbol(SymServidorA.tssolicitudamistad, yychar, yyline ,new String(yytext()));
          }
        case 74: break;
        case 30: 
          { return new Symbol(SymServidorA.telogin, yychar, yyline ,new String(yytext()));
          }
        case 75: break;
        case 13: 
          { return new Symbol(SymServidorA.ttama, yychar, yyline ,new String(yytext()));
          }
        case 76: break;
        case 40: 
          { return new Symbol(SymServidorA.tsmensaje, yychar, yyline ,new String(yytext()));
          }
        case 77: break;
        case 21: 
          { return new Symbol(SymServidorA.tsemisor, yychar, yyline ,new String(yytext()));
          }
        case 78: break;
        case 18: 
          { return new Symbol(SymServidorA.tsclave, yychar, yyline ,new String(yytext()));
          }
        case 79: break;
        case 1: 
          { /** rojo **/
                                /** Metodos.agregarErrorLexico( "Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar); **/
                                /**Metodos.addError("lexico", yyline, yychar, "Caracter no reconocido: " + yytext());**/
                                System.out.println("Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar);
          }
        case 80: break;
        case 41: 
          { return new Symbol(SymServidorA.teusuario, yychar, yyline ,new String(yytext()));
          }
        case 81: break;
        case 32: 
          { return new Symbol(SymServidorA.tsarchivo, yychar, yyline ,new String(yytext()));
          }
        case 82: break;
        case 56: 
          { return new Symbol(SymServidorA.tsdestinatarios, yychar, yyline ,new String(yytext()));
          }
        case 83: break;
        case 22: 
          { return new Symbol(SymServidorA.tsnombre, yychar, yyline ,new String(yytext()));
          }
        case 84: break;
        case 49: 
          { return new Symbol(SymServidorA.teusuarios, yychar, yyline ,new String(yytext()));
          }
        case 85: break;
        case 15: 
          { return new Symbol(SymServidorA.tcolor, yychar, yyline ,new String(yytext()));
          }
        case 86: break;
        case 20: 
          { return new Symbol(SymServidorA.tsestado, yychar, yyline ,new String(yytext()));
          }
        case 87: break;
        case 29: 
          { return new Symbol(SymServidorA.tecelda, yychar, yyline ,new String(yytext()));
          }
        case 88: break;
        case 46: 
          { return new Symbol(SymServidorA.tsarchivos, yychar, yyline ,new String(yytext()));
          }
        case 89: break;
        case 10: 
          { return new Symbol(SymServidorA.tde, yychar, yyline ,new String(yytext()));
          }
        case 90: break;
        case 11: 
          { return new Symbol(SymServidorA.tfila, yychar, yyline ,new String(yytext()));
          }
        case 91: break;
        case 44: 
          { return new Symbol(SymServidorA.temensaje, yychar, yyline ,new String(yytext()));
          }
        case 92: break;
        case 38: 
          { return new Symbol(SymServidorA.tesesion, yychar, yyline ,new String(yytext()));
          }
        case 93: break;
        case 37: 
          { return new Symbol(SymServidorA.tpeticion, yychar, yyline ,new String(yytext()));
          }
        case 94: break;
        case 12: 
          { return new Symbol(SymServidorA.ttipo, yychar, yyline ,new String(yytext()));
          }
        case 95: break;
        case 60: 
          { return new Symbol(SymServidorA.tfechacadena, yychar,yyline,new String(yytext()));
          }
        case 96: break;
        case 42: 
          { return new Symbol(SymServidorA.tearchivo, yychar, yyline ,new String(yytext()));
          }
        case 97: break;
        case 34: 
          { return new Symbol(SymServidorA.teemisor, yychar, yyline ,new String(yytext()));
          }
        case 98: break;
        case 16: 
          { return new Symbol(SymServidorA.tsfecha, yychar, yyline ,new String(yytext()));
          }
        case 99: break;
        case 4: 
          { return new Symbol(SymServidorA.tmenor, yychar, yyline,new String(yytext()));
          }
        case 100: break;
        case 3: 
          { return new Symbol(SymServidorA.tmayor, yychar, yyline,new String(yytext()));
          }
        case 101: break;
        case 5: 
          { return new Symbol(SymServidorA.tigual, yychar, yyline ,new String(yytext()));
          }
        case 102: break;
        case 2: 
          { yychar = 0;
          }
        case 103: break;
        case 24: 
          { return new Symbol(SymServidorA.tslogin, yychar, yyline ,new String(yytext()));
          }
        case 104: break;
        case 35: 
          { return new Symbol(SymServidorA.tenombre, yychar, yyline ,new String(yytext()));
          }
        case 105: break;
        case 23: 
          { return new Symbol(SymServidorA.tsasunto, yychar, yyline ,new String(yytext()));
          }
        case 106: break;
        case 55: 
          { return new Symbol(SymServidorA.tedestinatario, yychar, yyline ,new String(yytext()));
          }
        case 107: break;
        case 33: 
          { return new Symbol(SymServidorA.teestado, yychar, yyline ,new String(yytext()));
          }
        case 108: break;
        case 26: 
          { return new Symbol(SymServidorA.teclave, yychar, yyline ,new String(yytext()));
          }
        case 109: break;
        case 7: 
          { return new Symbol(SymServidorA.tcadena, yychar,yyline,new String(yytext().substring(1, yytext().length()-1)));
          }
        case 110: break;
        case 48: 
          { return new Symbol(SymServidorA.tscontenido, yychar, yyline ,new String(yytext()));
          }
        case 111: break;
        case 45: 
          { return new Symbol(SymServidorA.tsusuarios, yychar, yyline ,new String(yytext()));
          }
        case 112: break;
        case 52: 
          { return new Symbol(SymServidorA.tecontenido, yychar, yyline ,new String(yytext()));
          }
        case 113: break;
        case 39: 
          { return new Symbol(SymServidorA.tsformula, yychar, yyline ,new String(yytext()));
          }
        case 114: break;
        case 17: 
          { return new Symbol(SymServidorA.tscelda, yychar, yyline ,new String(yytext()));
          }
        case 115: break;
        case 6: 
          { /* Se ignoran */
          }
        case 116: break;
        case 47: 
          { return new Symbol(SymServidorA.tsrespuesta, yychar, yyline ,new String(yytext()));
          }
        case 117: break;
        case 51: 
          { return new Symbol(SymServidorA.terespuesta, yychar, yyline ,new String(yytext()));
          }
        case 118: break;
        case 50: 
          { return new Symbol(SymServidorA.tearchivos, yychar, yyline ,new String(yytext()));
          }
        case 119: break;
        case 27: 
          { return new Symbol(SymServidorA.tformula, yychar, yyline ,new String(yytext()));
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(SymServidorA.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
