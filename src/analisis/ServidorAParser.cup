package analisis;
import java_cup.runtime.*;
import java.util.*;
import acciones.*;
import java.util.ArrayList;

parser code

{:
    /**Metodo al que se llama automaticamente ante algun error sint√°ctico.*/
    public void syntax_error(Symbol s)
    {
        //Metodos.addError("sintactico", (s.right+1), s.left, "Identificador \"" +s.value + "\" no reconocido por la gramatica");
        System.out.println("Error sintactico en la Fila " + (s.right+1) +" Columna "+s.left+ ". Identificador \"" +s.value + "\" no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    { 
        //Metodos.addError("sintactico", (s.right+1), s.left, "Identificador \"" +s.value + "\" no reconocido por la gramatica");
        System.out.println("Error sintactico en la Fila " + (s.right+1)+ " Columna "+s.left+". Identificador \"" + s.value + "\" no reconocido."); 
    }

:}

action code 
{:
    int nvl = 0;
    String nombreArchivo ="";
:} 

terminal tssesion, tesesion, tsusuario, teusuario, tsfecha, tefecha, tsnombre, tenombre;
terminal tsclave, teclave, tsasunto, teasunto, tscontenido, tecontenido, tsdestinatarios;
terminal tedestinatarios, tsarchivos, tearchivos, tsdestinatario, tedestinatario, tsarchivo;
terminal tearchivo, tscelda, tecelda, tsformula, teformula, tsusuarios, teusuarios, tslogin;
terminal telogin, tsestado, teestado, tsrespuesta, terespuesta, tsemisor, teemisor;
terminal tssolicitudamistad, tesolicitudamistad, tsmensaje, temensaje, ttipo, ttama;
terminal tid, tpeticion, tde, tfecha, tfila, tcolumna, tcolor, tformula;
terminal tigual,tcadcampo, tcadena;
terminal tscorreos, tecorreos, tscorreo, tecorreo, tsde, tede, tusuario, tsdestino, tedestino;
terminal tssolicitudes, tesolicitudes,tssolicitud, tesolicitud;
terminal tamperson, toper, tpa, tpc, tbegin, tend, tpyc, tdospuntos, tcoma,tinteger; 
terminal tfloat, tchar, tboolean, tstring, tmas, tmenos, tpor, tdividir, tpot, tmod;
terminal tentero, tdecimal, tcaracter, ttrue , tfalse, tif, tla, tlc, telse;
terminal tor, tand, tno, tmenor, tmayor , tmenorigual, tmayorigual, tigualigual; 
terminal tdiferente, tfor, tto, tnext, twhile, tiden, treturn;

non terminal INICIO, CUERPO, ELEMENTOS,SESION, LISTA_ATR_SESION, ATRIBUTO_SESION;
non terminal LISTA_CAMPOS, CAMPOS, DESTINATARIOS;
non terminal ARCHIVOS, LISTA_ARCHIVOS, ARCHIVO, LISTA_ATR_ARCHIVO, ATRIBUTO_ARCHIVO;
non terminal LISTA_CELDAS, CELDA, LISTA_ATR_CELDA, ATRIBUTOS_CELDA, CONTENIDO_CELDA;
non terminal FORMULA, INSTRUCCIONES, USUARIOS, LISTA_USUARIOS, USUARIO, LOGIN;
non terminal EMISOR, MENSAJE, SOLICITUD_AMISTAD, CORREOS, LISTA_CORREOS, CORREO;
non terminal SOLICITUDES, LISTA_SOLICITUDES, SOLICITUD, LISTA_VARS, TIPO_VAR;
non terminal OPERACION, INSTRUCCION, DECLARA_VAR;
non terminal ASIGNA_VAR, REF_CELDA , EXPRESION, EXPR_PART, EXPR ,NUM,IF,ELSE;
non terminal CONDICIONES,CONDICION,OP_COMPARADOR,FOR,WHILE, RETURN;

precedence left tor;
precedence left tand;
precedence left tno, tigualigual;
precedence left tmenor, tmenorigual, tmayor, tmayorigual;

precedence left tmas, tmenos;
precedence left tpor, tdividir, tmod;
precedence left tpot;


start with INICIO; 

INICIO          ::= CUERPO {: System.out.println("Fin"); :};

CUERPO          ::= ELEMENTOS;

ELEMENTOS       ::= SESION:e {: Sesion sesion = (Sesion)e; sesion.operar(); :}
                    |USUARIOS:e {: Usuarios usuarios = (Usuarios)e; usuarios.operar(); :}
                    |LOGIN  
                    |SOLICITUD_AMISTAD
                    |MENSAJE
                    |CORREOS
                    |SOLICITUDES
                    |SOLICITUD;

SESION          ::= tssesion LISTA_ATR_SESION:la tcadcampo LISTA_CAMPOS:lc tesesion {: Sesion ses = new Sesion((ArrayList<Campo>)la, (ArrayList<Campo>)lc); RESULT = ses; :};

LISTA_ATR_SESION::= LISTA_ATR_SESION:l ATRIBUTO_SESION:e {: ArrayList<Campo> lista = (ArrayList<Campo>)l; lista.add((Campo)e); RESULT = lista; :}
                    |ATRIBUTO_SESION:e {: ArrayList<Campo> lista = new ArrayList<>(); lista.add((Campo)e); RESULT = lista;  :};

ATRIBUTO_SESION ::= ttipo tigual tcadena:e {: RESULT = new Campo("tipo", (String)e); :}
                    |tid tigual tcadena:e {: RESULT = new Campo("id", (String)e); :}
                    |tpeticion tigual tcadena:e {: RESULT = new Campo("peticion", (String)e); :}
                    |tde tigual tcadena:e {: RESULT = new Campo("de", (String)e); :}
                    |tfecha tigual tcadena:e {: RESULT = new Campo("fecha", (String)e); :};

LISTA_CAMPOS    ::= LISTA_CAMPOS:l CAMPOS:e {: ArrayList<Campo> lista = (ArrayList<Campo>)l; lista.add((Campo)e); RESULT = lista; :}
                    |CAMPOS:e {: ArrayList<Campo> lista = new ArrayList<>(); lista.add((Campo)e); RESULT = lista; :};

CAMPOS          ::=  tsusuario tcadcampo:e teusuario {: RESULT = new Campo("tipo", (String)e); :}
                    |tsfecha tcadcampo:e tefecha {: RESULT = new Campo("fecha", (String)e); :}
                    |tsnombre tcadcampo:e tenombre {: RESULT = new Campo("nombres", (String)e); :}
                    |tsclave tcadcampo:e teclave {: RESULT = new Campo("clave", (String)e); :}
                    |tscontenido tcadcampo:e tecontenido {: RESULT = new Campo("contenido", (String)e); :}
                    |tsasunto tcadcampo:e teasunto {: RESULT = new Campo("asunto", (String)e); :}
                    |tsestado tcadcampo:e teestado {: RESULT = new Campo("estado", (String)e); :}
                    |tsemisor tcadcampo:e teemisor {: RESULT = new Campo("emisor", (String)e); :}
                    |tsde tcadcampo:e tede {: RESULT = new Campo("de", (String)e); :}
                    |tsdestino tcadcampo:e tedestino {: RESULT = new Campo("destino", (String)e); :}
                    |tsrespuesta tcadcampo:e terespuesta {: RESULT = new Campo("respuesta", (String)e); :}
                    |tsdestinatario tcadcampo:e tedestinatario {: RESULT = new Campo("destinatario", (String)e); :}
                    |DESTINATARIOS 
                    |ARCHIVOS
                    |EMISOR;

DESTINATARIOS   ::= tsdestinatarios tcadcampo LISTA_CAMPOS tedestinatarios;

/**
LISTA_DESTINATARIOS ::= LISTA_DESTINATARIOS DESTINATARIO
                        |DESTINATARIO;
*/
                                    /** Verifica la validez del email en el sintactico para poder manejar mas facil el dominio del servidor */
/**
DESTINATARIO    ::= tsdestinatario tcadcampo tedestinatario;
*/

ARCHIVOS        ::= tsarchivos LISTA_ARCHIVOS tearchivos;

                    /** La lista puede venir vacia asi que lo dejo con un epsilon. */
LISTA_ARCHIVOS  ::= LISTA_ARCHIVOS ARCHIVO
                    |;

ARCHIVO         ::= tsarchivo LISTA_ATR_ARCHIVO tcadcampo LISTA_CELDAS tearchivo;

LISTA_ATR_ARCHIVO::= LISTA_ATR_ARCHIVO ATRIBUTO_ARCHIVO
                    |ATRIBUTO_ARCHIVO;

ATRIBUTO_ARCHIVO::= ttipo tigual tcadena
                    |ttama tigual tcadena;

LISTA_CELDAS    ::= LISTA_CELDAS CELDA
                    |CELDA;

CELDA           ::= tscelda LISTA_ATR_CELDA tcadcampo CONTENIDO_CELDA tecelda;

LISTA_ATR_CELDA ::= LISTA_ATR_CELDA ATRIBUTOS_CELDA
                    |ATRIBUTOS_CELDA;

ATRIBUTOS_CELDA ::= tfila tigual tcadena
                    |tcolumna tigual tcadena
                    |ttipo tigual tcadena
                    |tcolor tigual tcadena
                    |tformula tigual tcadena;


CONTENIDO_CELDA ::= tcadena
                    |FORMULA
                    |;

FORMULA         ::= tsformula OPERACION teformula;

EMISOR          ::= tsemisor tcadcampo LISTA_CAMPOS teemisor;

USUARIOS        ::= tsusuarios LISTA_USUARIOS:lu teusuarios {: Usuarios nuevosUsuarios = new Usuarios((ArrayList<Usuario>)lu); RESULT = nuevosUsuarios; :};

LISTA_USUARIOS  ::= LISTA_USUARIOS:lu USUARIO:e {: ArrayList<Usuario> lista = (ArrayList<Usuario>)lu; lista.add((Usuario)e); RESULT = lista; :}
                    |USUARIO:e {: ArrayList<Usuario> lista = new ArrayList<>(); lista.add((Usuario)e); RESULT = lista; :};

CORREOS         ::= tscorreos tusuario tigual tcadena tcadcampo LISTA_CORREOS tecorreos;

LISTA_CORREOS   ::= LISTA_CORREOS CORREO
                    |CORREO;

CORREO          ::= tscorreo LISTA_CAMPOS tecorreo;

USUARIO         ::= tsusuario tcadcampo LISTA_CAMPOS:lc tmenor teusuario {: ArrayList<Campo> lista = (ArrayList<Campo>)lc; Usuario nuevoUsuario = new Usuario(lista); :};

LOGIN           ::= tslogin LISTA_CAMPOS telogin;

MENSAJE         ::= tsmensaje LISTA_CAMPOS temensaje;

SOLICITUD_AMISTAD ::= tssolicitudamistad tcadcampo LISTA_CAMPOS tesolicitudamistad;

/**
CAMPOS_SOLICITUD::= tsrespuesta tcadcampo terespuesta
                    |tsdestinatario tcadcampo tedestinatario
                    |EMISOR;
*/

SOLICITUDES     ::= tssolicitudes tcadcampo LISTA_SOLICITUDES tesolicitudes;

LISTA_SOLICITUDES ::= LISTA_SOLICITUDES SOLICITUD
                      |SOLICITUD;

SOLICITUD       ::= tssolicitud tcadcampo LISTA_CAMPOS tesolicitud;

OPERACION       ::= tamperson toper tigual tpa tbegin tla INSTRUCCIONES tlc tend tpc tpyc;

INSTRUCCIONES   ::= INSTRUCCIONES INSTRUCCION
                    |INSTRUCCION;

INSTRUCCION     ::= DECLARA_VAR 
                    |ASIGNA_VAR
                    |IF
                    |FOR
                    |WHILE
                    |RETURN;

RETURN          ::= treturn EXPRESION;

DECLARA_VAR     ::= LISTA_VARS tdospuntos TIPO_VAR;

LISTA_VARS      ::= LISTA_VARS tcoma tiden
                    |tiden;

TIPO_VAR        ::= tinteger
                    |tfloat
                    |tchar
                    |tboolean
                    |tstring;

ASIGNA_VAR      ::= tiden tigual EXPRESION
                    |REF_CELDA tigual EXPRESION;

REF_CELDA       ::= tamperson tpa EXPRESION tcoma EXPRESION tpc;

EXPRESION       ::= EXPR_PART;

EXPR_PART       ::= EXPR;

EXPR            ::= EXPR:e1 tmas EXPR:e2  
                    |EXPR:e1 tmenos EXPR:e2  
                    |EXPR:e1 tpor EXPR:e2  
                    |EXPR:e1 tdividir EXPR:e2 
                    |EXPR:e1 tpot EXPR:e2
                    |EXPR:e1 tmod EXPR:e2
                    |NUM:n   
                    |tpa EXPR:e tpc;

NUM             ::= tentero:e 
                    |tdecimal:e
                    |tcadena:e 
                    |tcaracter:e
                    |ttrue:e
                    |tfalse:e
                    |tiden:e
                    |REF_CELDA; 

IF              ::= tif tpa CONDICIONES tpc tla INSTRUCCIONES tlc ELSE;

ELSE            ::= telse tla INSTRUCCIONES:l tlc {: RESULT = l; :}
                    |{: RESULT = null; :};

CONDICIONES     ::= CONDICIONES:e1 tor CONDICIONES:e2 
                    |CONDICIONES:e1 tand CONDICIONES:e2 
                    |tno tpa CONDICIONES:e tpc
                    |tpa CONDICIONES:e tpc 
                    |CONDICION:e ;

CONDICION       ::= EXPRESION:val1 OP_COMPARADOR:op EXPRESION:val2 ;


OP_COMPARADOR   ::= tmenor          {: RESULT = new String ("<"); :}
                    |tmayor         {: RESULT = new String (">"); :}
                    |tmenorigual    {: RESULT = new String ("<="); :}
                    |tmayorigual    {: RESULT = new String (">="); :}
                    |tigualigual    {: RESULT = new String ("=="); :}
                    |tdiferente     {: RESULT = new String ("<>"); :};

FOR             ::= tfor tiden tigual EXPRESION tto EXPRESION tnext tla INSTRUCCIONES tlc;

WHILE           ::= twhile tpa CONDICIONES tpc tla INSTRUCCIONES tlc ;



 

