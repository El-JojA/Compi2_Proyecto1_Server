/* The following code was generated by JFlex 1.4.3 on 27/03/14 04:26 PM */

package analisis;
import java_cup.runtime.Symbol;
import java.util.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 27/03/14 04:26 PM from the specification file
 * <tt>ClienteALex.jflex</tt>
 */
public class ClienteALex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int A = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\57\1\6\1\0\2\57\22\0\1\57\1\56\1\5\2\0"+
    "\1\53\1\37\1\3\1\40\1\41\1\51\1\47\1\11\1\50\1\2"+
    "\1\17\12\1\1\54\1\44\1\10\1\36\1\7\2\0\1\21\1\27"+
    "\1\24\1\31\1\13\1\23\1\34\1\25\1\14\2\4\1\33\1\26"+
    "\1\16\1\15\1\35\1\4\1\22\1\12\1\30\1\20\1\32\1\45"+
    "\1\46\2\4\3\0\1\52\2\0\1\21\1\27\1\24\1\31\1\13"+
    "\1\23\1\34\1\25\1\14\2\4\1\33\1\26\1\16\1\15\1\35"+
    "\1\4\1\22\1\12\1\30\1\20\1\32\1\45\1\46\2\4\1\42"+
    "\1\55\1\43\63\0\1\4\21\0\1\4\u1f54\0\1\4\udfe7\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\5\1\1\7\6\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\1\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\1\1\25\1\26\3\0\1\27\1\30\1\31"+
    "\1\32\12\0\1\33\1\34\3\0\1\35\13\0\1\36"+
    "\3\0\1\37\1\40\1\0\1\41\1\42\1\43\25\0"+
    "\1\44\2\0\1\45\5\0\1\46\47\0\1\47\1\50"+
    "\1\51\1\0\1\52\5\0\1\53\1\0\1\54\1\55"+
    "\1\56\23\0\1\57\17\0\1\60\1\61\1\62\1\0"+
    "\1\63\1\0\1\64\2\0\1\65\23\0\1\66\1\0"+
    "\1\67\3\0\1\70\1\71\1\72\2\0\1\73\1\74"+
    "\1\0\1\75\17\0\1\76\4\0\1\77\1\0\1\100"+
    "\1\101\1\102\2\0\1\103\5\0\1\104\1\0\1\105"+
    "\3\0\1\106\1\107\4\0\1\110\1\0\1\111\1\0"+
    "\1\112\4\0\1\113\2\0\1\114\1\115\2\0\1\116"+
    "\1\117\1\120\2\0\1\121\2\0\1\122\1\123\1\0"+
    "\1\124\1\125\3\0\1\126\3\0\1\127\1\0\1\130";

  private static int [] zzUnpackAction() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\360\0\u0120"+
    "\0\60\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\60\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\60"+
    "\0\60\0\60\0\60\0\60\0\u03c0\0\60\0\60\0\60"+
    "\0\60\0\60\0\60\0\u03f0\0\60\0\u0420\0\u0450\0\u0480"+
    "\0\300\0\60\0\u04b0\0\u04b0\0\60\0\u04e0\0\u0510\0\u0540"+
    "\0\u0570\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\60"+
    "\0\60\0\u06c0\0\u06f0\0\u0720\0\60\0\u0750\0\u0780\0\u07b0"+
    "\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930"+
    "\0\60\0\u0960\0\u0990\0\u09c0\0\60\0\60\0\u09f0\0\60"+
    "\0\u0450\0\60\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\u0e70\0\60\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30\0\u0f60"+
    "\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0"+
    "\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380\0\u13b0\0\u13e0"+
    "\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530\0\u1560"+
    "\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680\0\u16b0\0\u16e0"+
    "\0\60\0\60\0\60\0\u1710\0\60\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\u1800\0\60\0\u1830\0\60\0\60\0\60\0\u1860"+
    "\0\u1890\0\u18c0\0\u18f0\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0"+
    "\0\u1a10\0\u1a40\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\60\0\u1bf0\0\u1c20\0\u1c50\0\u1c80\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e90\0\60\0\60\0\60\0\u1ec0\0\60\0\u1ef0"+
    "\0\60\0\u1f20\0\u1f50\0\60\0\u1f80\0\u1fb0\0\u1fe0\0\u2010"+
    "\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\u2160\0\u2190"+
    "\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0\0\60"+
    "\0\u2310\0\60\0\u2340\0\u2370\0\u23a0\0\60\0\60\0\60"+
    "\0\u23d0\0\u2400\0\60\0\60\0\u2430\0\60\0\u2460\0\u2490"+
    "\0\u24c0\0\u24f0\0\u2520\0\u2550\0\u2580\0\u25b0\0\u25e0\0\u2610"+
    "\0\u2640\0\u2670\0\u26a0\0\u26d0\0\u2700\0\60\0\u2730\0\u2760"+
    "\0\u2790\0\u27c0\0\60\0\u27f0\0\60\0\60\0\60\0\u2820"+
    "\0\u2850\0\60\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\60"+
    "\0\u2970\0\60\0\u29a0\0\u29d0\0\u2a00\0\60\0\u2a30\0\u2a60"+
    "\0\u2a90\0\u2ac0\0\u2af0\0\60\0\u2b20\0\60\0\u2b50\0\60"+
    "\0\u2b80\0\u2bb0\0\u2be0\0\u2c10\0\60\0\u2c40\0\u2c70\0\60"+
    "\0\60\0\u2ca0\0\u2cd0\0\60\0\60\0\60\0\u2d00\0\u2d30"+
    "\0\60\0\u2d60\0\u2d90\0\60\0\60\0\u2dc0\0\60\0\60"+
    "\0\u2df0\0\u2e20\0\u2e50\0\60\0\u2e80\0\u2eb0\0\u2ee0\0\60"+
    "\0\u2f10\0\60";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\2\2\1\20\1\21\1\22\2\2\1\23\1\24\2\2"+
    "\1\25\2\2\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\2\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\61\0\1\3\1\47\61\0"+
    "\1\50\5\0\5\50\1\0\16\50\7\0\2\50\11\0"+
    "\5\51\1\52\1\0\51\51\10\53\1\0\25\53\1\54"+
    "\21\53\7\0\1\55\2\0\1\56\1\57\2\0\1\60"+
    "\1\61\1\62\1\63\1\64\1\65\1\66\4\0\1\67"+
    "\4\0\1\70\35\0\1\71\13\0\1\72\45\0\1\73"+
    "\14\0\1\74\55\0\1\75\63\0\1\76\35\0\1\77"+
    "\57\0\1\100\60\0\1\101\1\102\3\0\1\103\11\0"+
    "\1\104\41\0\1\105\7\0\1\106\45\0\1\107\60\0"+
    "\1\110\1\111\3\0\1\112\1\113\52\0\1\114\100\0"+
    "\1\115\60\0\1\116\45\0\1\117\107\0\1\120\61\0"+
    "\1\46\1\0\1\121\61\0\1\122\54\0\10\53\1\0"+
    "\47\53\13\0\1\123\62\0\1\124\3\0\1\125\52\0"+
    "\1\126\54\0\1\127\1\130\2\0\1\131\1\0\1\132"+
    "\1\133\1\134\1\135\1\136\4\0\1\137\40\0\1\140"+
    "\57\0\1\141\7\0\1\142\50\0\1\143\57\0\1\144"+
    "\1\0\1\145\55\0\1\146\1\0\1\147\55\0\1\150"+
    "\66\0\1\151\65\0\1\152\1\153\40\0\1\154\60\0"+
    "\1\155\112\0\1\156\41\0\1\157\62\0\1\160\46\0"+
    "\1\161\70\0\1\162\41\0\1\163\75\0\1\164\45\0"+
    "\1\165\72\0\1\166\60\0\1\167\50\0\1\170\51\0"+
    "\1\171\73\0\1\172\37\0\1\173\55\0\1\174\77\0"+
    "\1\175\47\0\1\176\63\0\1\177\44\0\1\200\62\0"+
    "\1\201\3\0\1\202\52\0\1\203\54\0\1\204\57\0"+
    "\1\205\7\0\1\206\50\0\1\207\57\0\1\210\1\0"+
    "\1\211\55\0\1\212\1\0\1\213\55\0\1\214\64\0"+
    "\1\215\57\0\1\216\63\0\1\217\67\0\1\220\47\0"+
    "\1\221\55\0\1\222\70\0\1\223\42\0\1\224\3\0"+
    "\1\225\47\0\1\226\61\0\1\227\56\0\1\230\57\0"+
    "\1\231\66\0\1\232\65\0\1\233\47\0\1\234\60\0"+
    "\1\235\64\0\1\236\43\0\1\237\66\0\1\240\53\0"+
    "\1\241\2\0\1\242\61\0\1\243\51\0\1\244\60\0"+
    "\1\245\63\0\1\246\51\0\1\247\60\0\1\250\76\0"+
    "\1\251\40\0\1\252\57\0\1\253\60\0\1\254\71\0"+
    "\1\255\42\0\1\256\77\0\1\257\47\0\1\260\63\0"+
    "\1\261\51\0\1\262\57\0\1\263\63\0\1\264\67\0"+
    "\1\265\47\0\1\266\55\0\1\267\70\0\1\270\42\0"+
    "\1\271\3\0\1\272\44\0\1\273\2\0\1\274\66\0"+
    "\1\275\54\0\1\276\66\0\1\277\46\0\1\300\70\0"+
    "\1\301\60\0\1\302\62\0\1\303\56\0\1\304\51\0"+
    "\1\305\65\0\1\306\45\0\1\307\63\0\1\310\57\0"+
    "\1\311\55\0\1\312\52\0\1\313\74\0\1\314\51\0"+
    "\1\315\63\0\1\316\47\0\1\317\65\0\1\320\46\0"+
    "\1\321\61\0\1\322\63\0\1\323\60\0\1\324\57\0"+
    "\1\325\51\0\1\326\57\0\1\327\60\0\1\330\71\0"+
    "\1\331\51\0\1\332\54\0\1\333\66\0\1\334\46\0"+
    "\1\335\70\0\1\336\60\0\1\337\62\0\1\340\56\0"+
    "\1\341\51\0\1\342\65\0\1\343\51\0\1\344\65\0"+
    "\1\345\43\0\1\346\55\0\1\347\66\0\1\350\56\0"+
    "\1\351\60\0\1\352\51\0\1\353\57\0\1\354\60\0"+
    "\1\355\77\0\1\356\40\0\1\357\60\0\1\360\74\0"+
    "\1\361\42\0\1\362\56\0\1\363\60\0\1\364\72\0"+
    "\1\365\41\0\1\366\61\0\1\367\63\0\1\370\60\0"+
    "\1\371\57\0\1\372\57\0\1\373\65\0\1\374\43\0"+
    "\1\375\55\0\1\376\66\0\1\377\56\0\1\u0100\60\0"+
    "\1\u0101\51\0\1\u0102\57\0\1\u0103\60\0\1\u0104\57\0"+
    "\1\u0105\60\0\1\u0106\74\0\1\u0107\55\0\1\u0108\62\0"+
    "\1\u0109\42\0\1\u010a\56\0\1\u010b\60\0\1\u010c\62\0"+
    "\1\u010d\57\0\1\u010e\53\0\1\u010f\60\0\1\u0110\72\0"+
    "\1\u0111\35\0\1\u0112\63\0\1\u0113\60\0\1\u0114\60\0"+
    "\1\u0115\74\0\1\u0116\55\0\1\u0117\36\0\1\u0118\103\0"+
    "\1\u0119\33\0\1\u011a\66\0\1\u011b\56\0\1\u011c\60\0"+
    "\1\u011d\56\0\1\u011e\57\0\1\u011f\64\0\1\u0120\56\0"+
    "\1\u0121\52\0\1\u0122\64\0\1\u0123\45\0\1\u0124\65\0"+
    "\1\u0125\51\0\1\u0126\65\0\1\u0127\51\0\1\u0128\65\0"+
    "\1\u0129\64\0\1\u012a\56\0\1\u012b\52\0\1\u012c\52\0"+
    "\1\u012d\71\0\1\u012e\50\0\1\u012f\62\0\1\u0130\51\0"+
    "\1\u0131\101\0\1\u0132\56\0\1\u0133\36\0\1\u0134\57\0"+
    "\1\u0135\57\0\1\u0136\2\0\1\u0137\62\0\1\u0138\51\0"+
    "\1\u0139\101\0\1\u013a\56\0\1\u013b\36\0\1\u013c\65\0"+
    "\1\u013d\63\0\1\u013e\45\0\1\u013f\57\0\1\u0140\65\0"+
    "\1\u0141\63\0\1\u0142\60\0\1\u0143\44\0\1\u0144\72\0"+
    "\1\u0145\51\0\1\u0146\57\0\1\u0147\60\0\1\u0148\57\0"+
    "\1\u0149\51\0\1\u014a\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12096];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\1\11\2\1\1\11\5\1\1\11"+
    "\10\1\5\11\1\1\6\11\1\1\1\11\1\1\3\0"+
    "\1\11\2\1\1\11\12\0\2\11\3\0\1\11\13\0"+
    "\1\11\3\0\2\11\1\0\1\11\1\1\1\11\25\0"+
    "\1\1\2\0\1\11\5\0\1\1\47\0\3\11\1\0"+
    "\1\11\5\0\1\11\1\0\3\11\23\0\1\11\17\0"+
    "\3\11\1\0\1\11\1\0\1\11\2\0\1\11\23\0"+
    "\1\11\1\0\1\11\3\0\3\11\2\0\2\11\1\0"+
    "\1\11\17\0\1\11\4\0\1\11\1\0\3\11\2\0"+
    "\1\11\5\0\1\11\1\0\1\11\3\0\1\11\1\1"+
    "\4\0\1\11\1\0\1\11\1\0\1\11\4\0\1\11"+
    "\2\0\2\11\2\0\3\11\2\0\1\11\2\0\2\11"+
    "\1\0\2\11\3\0\1\11\3\0\1\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[330];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ClienteALex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ClienteALex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 178) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 11: 
          { return new Symbol(ClienteASym.tpc, yychar, yyline ,new String(yytext()));
          }
        case 89: break;
        case 19: 
          { return new Symbol(ClienteASym.tmod, yychar, yyline ,new String(yytext()));
          }
        case 90: break;
        case 73: 
          { return new Symbol(ClienteASym.tenombre, yychar, yyline ,new String(yytext()));
          }
        case 91: break;
        case 61: 
          { return new Symbol(ClienteASym.tsnombre, yychar, yyline ,new String(yytext()));
          }
        case 92: break;
        case 78: 
          { return new Symbol(ClienteASym.teenviado, yychar, yyline ,new String(yytext()));
          }
        case 93: break;
        case 7: 
          { return new Symbol(ClienteASym.tdividir, yychar, yyline ,new String(yytext()));
          }
        case 94: break;
        case 84: 
          { return new Symbol(ClienteASym.tearchivos, yychar, yyline ,new String(yytext()));
          }
        case 95: break;
        case 57: 
          { return new Symbol(ClienteASym.tinteger, yychar, yyline ,new String(yytext()));
          }
        case 96: break;
        case 24: 
          { return new Symbol(ClienteASym.tcadcampo, yychar,yyline,new String(yytext().substring(1, yytext().length()-1)));
          }
        case 97: break;
        case 87: 
          { return new Symbol(ClienteASym.tsdestinatario, yychar, yyline ,new String(yytext()));
          }
        case 98: break;
        case 30: 
          { return new Symbol(ClienteASym.tto, yychar, yyline ,new String(yytext()));
          }
        case 99: break;
        case 2: 
          { return new Symbol(ClienteASym.tentero, yychar,yyline,new String(yytext()));
          }
        case 100: break;
        case 1: 
          { /** rojo **/
                                /** Metodos.agregarErrorLexico( "Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar); **/
                                /**Metodos.addError("lexico", yyline, yychar, "Caracter no reconocido: " + yytext());**/
                                System.out.println("Error lexico: " + yytext() + " en la linea: " + yyline + " y columna " + yychar);
          }
        case 101: break;
        case 50: 
          { return new Symbol(ClienteASym.tcolor, yychar, yyline ,new String(yytext()));
          }
        case 102: break;
        case 69: 
          { return new Symbol(ClienteASym.tecelda, yychar, yyline ,new String(yytext()));
          }
        case 103: break;
        case 83: 
          { return new Symbol(ClienteASym.tscontenido, yychar, yyline ,new String(yytext()));
          }
        case 104: break;
        case 77: 
          { return new Symbol(ClienteASym.tsformula, yychar, yyline ,new String(yytext()));
          }
        case 105: break;
        case 55: 
          { return new Symbol(ClienteASym.tscelda, yychar, yyline ,new String(yytext()));
          }
        case 106: break;
        case 29: 
          { return new Symbol(ClienteASym.tid, yychar, yyline ,new String(yytext()));
          }
        case 107: break;
        case 40: 
          { return new Symbol(ClienteASym.toper, yychar, yyline ,new String(yytext()));
          }
        case 108: break;
        case 47: 
          { return new Symbol(ClienteASym.tede, yychar, yyline ,new String(yytext()));
          }
        case 109: break;
        case 32: 
          { return new Symbol(ClienteASym.tand, yychar,yyline,new String(yytext()));
          }
        case 110: break;
        case 25: 
          { return new Symbol(ClienteASym.tmayorigual, yychar, yyline,new String(yytext()));
          }
        case 111: break;
        case 12: 
          { return new Symbol(ClienteASym.tla, yychar, yyline ,new String(yytext()));
          }
        case 112: break;
        case 68: 
          { return new Symbol(ClienteASym.tefecha, yychar, yyline ,new String(yytext()));
          }
        case 113: break;
        case 46: 
          { return new Symbol(ClienteASym.ttrue, yychar, yyline ,new String(yytext()));
          }
        case 114: break;
        case 66: 
          { return new Symbol(ClienteASym.tsenviado, yychar, yyline ,new String(yytext()));
          }
        case 115: break;
        case 86: 
          { return new Symbol(ClienteASym.tecontenido, yychar, yyline ,new String(yytext()));
          }
        case 116: break;
        case 79: 
          { return new Symbol(ClienteASym.teusuario, yychar, yyline ,new String(yytext()));
          }
        case 117: break;
        case 48: 
          { return new Symbol(ClienteASym.tfalse, yychar, yyline ,new String(yytext()));
          }
        case 118: break;
        case 64: 
          { return new Symbol(ClienteASym.tformula, yychar, yyline ,new String(yytext()));
          }
        case 119: break;
        case 54: 
          { return new Symbol(ClienteASym.tsfecha, yychar, yyline ,new String(yytext()));
          }
        case 120: break;
        case 45: 
          { return new Symbol(ClienteASym.ttama, yychar, yyline ,new String(yytext()));
          }
        case 121: break;
        case 74: 
          { return new Symbol(ClienteASym.teasunto, yychar, yyline ,new String(yytext()));
          }
        case 122: break;
        case 65: 
          { return new Symbol(ClienteASym.tcolumna, yychar, yyline ,new String(yytext()));
          }
        case 123: break;
        case 17: 
          { return new Symbol(ClienteASym.tpor, yychar, yyline ,new String(yytext()));
          }
        case 124: break;
        case 75: 
          { return new Symbol(ClienteASym.tecorreo, yychar, yyline ,new String(yytext()));
          }
        case 125: break;
        case 62: 
          { return new Symbol(ClienteASym.tsasunto, yychar, yyline ,new String(yytext()));
          }
        case 126: break;
        case 76: 
          { return new Symbol(ClienteASym.tsregistro, yychar, yyline ,new String(yytext()));
          }
        case 127: break;
        case 36: 
          { return new Symbol(ClienteASym.tsde, yychar, yyline ,new String(yytext()));
          }
        case 128: break;
        case 63: 
          { return new Symbol(ClienteASym.tscorreo, yychar, yyline ,new String(yytext()));
          }
        case 129: break;
        case 88: 
          { return new Symbol(ClienteASym.tedestinatario, yychar, yyline ,new String(yytext()));
          }
        case 130: break;
        case 14: 
          { return new Symbol(ClienteASym.tpyc, yychar, yyline ,new String(yytext()));
          }
        case 131: break;
        case 49: 
          { return new Symbol(ClienteASym.tfloat, yychar, yyline ,new String(yytext()));
          }
        case 132: break;
        case 37: 
          { return new Symbol(ClienteASym.tend, yychar, yyline ,new String(yytext()));
          }
        case 133: break;
        case 70: 
          { return new Symbol(ClienteASym.tsusuario, yychar, yyline ,new String(yytext()));
          }
        case 134: break;
        case 28: 
          { return new Symbol(ClienteASym.tif, yychar, yyline ,new String(yytext()));
          }
        case 135: break;
        case 38: 
          { return new Symbol(ClienteASym.tfor, yychar, yyline ,new String(yytext()));
          }
        case 136: break;
        case 58: 
          { return new Symbol(ClienteASym.treturn, yychar, yyline ,new String(yytext()));
          }
        case 137: break;
        case 67: 
          { return new Symbol(ClienteASym.teerror, yychar, yyline ,new String(yytext()));
          }
        case 138: break;
        case 13: 
          { return new Symbol(ClienteASym.tlc, yychar, yyline ,new String(yytext()));
          }
        case 139: break;
        case 3: 
          { yychar = 0;
          }
        case 140: break;
        case 85: 
          { return new Symbol(ClienteASym.teregistro, yychar, yyline ,new String(yytext()));
          }
        case 141: break;
        case 15: 
          { return new Symbol(ClienteASym.tmas, yychar, yyline ,new String(yytext()));
          }
        case 142: break;
        case 10: 
          { return new Symbol(ClienteASym.tpa, yychar, yyline ,new String(yytext()));
          }
        case 143: break;
        case 34: 
          { return new Symbol(ClienteASym.tdecimal, yychar,yyline,new String(yytext()));
          }
        case 144: break;
        case 80: 
          { return new Symbol(ClienteASym.tearchivo, yychar, yyline ,new String(yytext()));
          }
        case 145: break;
        case 42: 
          { return new Symbol(ClienteASym.tfila, yychar, yyline ,new String(yytext()));
          }
        case 146: break;
        case 4: 
          { return new Symbol(ClienteASym.tmayor, yychar, yyline,new String(yytext()));
          }
        case 147: break;
        case 22: 
          { /* Se ignoran */
          }
        case 148: break;
        case 27: 
          { return new Symbol(ClienteASym.tmenorigual, yychar, yyline,new String(yytext()));
          }
        case 149: break;
        case 16: 
          { return new Symbol(ClienteASym.tmenos, yychar, yyline ,new String(yytext()));
          }
        case 150: break;
        case 52: 
          { return new Symbol(ClienteASym.twhile, yychar, yyline ,new String(yytext()));
          }
        case 151: break;
        case 5: 
          { return new Symbol(ClienteASym.tmenor, yychar, yyline,new String(yytext()));
          }
        case 152: break;
        case 39: 
          { return new Symbol(ClienteASym.telse, yychar, yyline ,new String(yytext()));
          }
        case 153: break;
        case 23: 
          { return new Symbol(ClienteASym.tcadena, yychar,yyline,new String(yytext().substring(1, yytext().length()-1)));
          }
        case 154: break;
        case 53: 
          { return new Symbol(ClienteASym.tserror, yychar, yyline ,new String(yytext()));
          }
        case 155: break;
        case 21: 
          { return new Symbol(ClienteASym.tno, yychar,yyline,new String(yytext()));
          }
        case 156: break;
        case 51: 
          { return new Symbol(ClienteASym.tbegin, yychar, yyline ,new String(yytext()));
          }
        case 157: break;
        case 18: 
          { return new Symbol(ClienteASym.tpot, yychar, yyline ,new String(yytext()));
          }
        case 158: break;
        case 20: 
          { return new Symbol(ClienteASym.tdospuntos, yychar, yyline ,new String(yytext()));
          }
        case 159: break;
        case 33: 
          { return new Symbol(ClienteASym.tor, yychar,yyline,new String(yytext()));
          }
        case 160: break;
        case 8: 
          { return new Symbol(ClienteASym.tigual, yychar, yyline ,new String(yytext()));
          }
        case 161: break;
        case 43: 
          { return new Symbol(ClienteASym.tchar, yychar, yyline ,new String(yytext()));
          }
        case 162: break;
        case 6: 
          { return new Symbol(ClienteASym.tcoma, yychar, yyline ,new String(yytext()));
          }
        case 163: break;
        case 9: 
          { return new Symbol(ClienteASym.tamperson, yychar, yyline ,new String(yytext()));
          }
        case 164: break;
        case 41: 
          { return new Symbol(ClienteASym.tnext, yychar, yyline ,new String(yytext()));
          }
        case 165: break;
        case 71: 
          { return new Symbol(ClienteASym.tsarchivo, yychar, yyline ,new String(yytext()));
          }
        case 166: break;
        case 31: 
          { return new Symbol(ClienteASym.tigualigual, yychar, yyline,new String(yytext()));
          }
        case 167: break;
        case 44: 
          { return new Symbol(ClienteASym.ttipo, yychar, yyline ,new String(yytext()));
          }
        case 168: break;
        case 56: 
          { return new Symbol(ClienteASym.tstring, yychar, yyline ,new String(yytext()));
          }
        case 169: break;
        case 35: 
          { return new Symbol(ClienteASym.tcaracter, yychar,yyline,new String(yytext()));
          }
        case 170: break;
        case 26: 
          { return new Symbol(ClienteASym.tdiferente, yychar, yyline,new String(yytext()));
          }
        case 171: break;
        case 82: 
          { return new Symbol(ClienteASym.tsarchivos, yychar, yyline ,new String(yytext()));
          }
        case 172: break;
        case 72: 
          { return new Symbol(ClienteASym.tesesion, yychar, yyline ,new String(yytext()));
          }
        case 173: break;
        case 59: 
          { return new Symbol(ClienteASym.tboolean, yychar, yyline ,new String(yytext()));
          }
        case 174: break;
        case 60: 
          { return new Symbol(ClienteASym.tssesion, yychar, yyline ,new String(yytext()));
          }
        case 175: break;
        case 81: 
          { return new Symbol(ClienteASym.teformula, yychar, yyline ,new String(yytext()));
          }
        case 176: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(ClienteASym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
