
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jul 07 23:23:33 CST 2013
//----------------------------------------------------

package analisis;

import java_cup.runtime.*;
import java.util.*;
import acciones.*;

/** CUP v0.10k generated parser.
  * @version Sun Jul 07 23:23:33 CST 2013
  */
public class FunParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public FunParser() {super();}

  /** Constructor which sets the default scanner. */
  public FunParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\004\000\002\003\003\000\002\004" +
    "\005\000\002\005\011\000\002\006\010\000\002\006\002" +
    "\000\002\064\002\000\002\017\006\000\002\065\002\000" +
    "\002\017\005\000\002\066\002\000\002\017\006\000\002" +
    "\017\002\000\002\020\005\000\002\020\005\000\002\020" +
    "\004\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\002\000" +
    "\002\021\014\000\002\022\005\000\002\022\002\000\002" +
    "\023\006\000\002\023\002\000\002\024\005\000\002\024" +
    "\002\000\002\026\006\000\002\007\010\000\002\010\006" +
    "\000\002\010\002\000\002\011\006\000\002\011\002\000" +
    "\002\012\005\000\002\012\002\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\014\006\000\002\015\006" +
    "\000\002\016\006\000\002\025\003\000\002\062\003\000" +
    "\002\063\005\000\002\063\005\000\002\063\005\000\002" +
    "\063\005\000\002\063\005\000\002\063\003\000\002\063" +
    "\005\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\004\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\031\003\000\002\031\003\000\002\054\006" +
    "\000\002\055\006\000\002\032\006\000\002\061\004\000" +
    "\002\033\005\000\002\033\002\000\002\034\004\000\002" +
    "\034\002\000\002\035\005\000\002\035\002\000\002\036" +
    "\005\000\002\036\003\000\002\067\002\000\002\037\013" +
    "\000\002\040\006\000\002\040\002\000\002\041\005\000" +
    "\002\041\005\000\002\041\006\000\002\041\005\000\002" +
    "\041\003\000\002\042\005\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\070\002\000\002\044\016\000" +
    "\002\071\002\000\002\045\012\000\002\072\002\000\002" +
    "\046\013\000\002\047\012\000\002\050\011\000\002\050" +
    "\002\000\002\060\004\000\002\051\007\000\002\051\002" +
    "\000\002\052\006\000\002\056\004\000\002\057\005\000" +
    "\002\057\002\000\002\053\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\004\004\001\002\000\004\031\u0107\001" +
    "\002\000\030\002\ufffc\005\011\007\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\014\ufffc\015\ufffc\016\ufffc\040\ufffc\077\ufffc\001" +
    "\002\000\004\002\010\001\002\000\004\002\000\001\002" +
    "\000\004\002\001\001\002\000\004\077\u0102\001\002\000" +
    "\026\002\ufff5\007\023\011\014\012\030\013\022\014\013" +
    "\015\031\016\016\040\027\077\015\001\002\000\006\060" +
    "\uffd9\077\uffd9\001\002\000\006\060\uffdc\077\uffdc\001\002" +
    "\000\054\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0" +
    "\060\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\067\uffb0\071" +
    "\uffb0\072\uffb0\073\uffb0\001\002\000\006\060\uffd7\077\uffd7" +
    "\001\002\000\006\057\uffdf\063\041\001\002\000\026\002" +
    "\ufff9\007\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9" +
    "\016\ufff9\040\ufff9\077\ufff9\001\002\000\004\060\372\001" +
    "\002\000\006\060\uffda\077\uffda\001\002\000\004\077\361" +
    "\001\002\000\004\077\037\001\002\000\004\002\uffff\001" +
    "\002\000\004\060\034\001\002\000\004\070\032\001\002" +
    "\000\006\060\uffdb\077\uffdb\001\002\000\006\060\uffd8\077" +
    "\uffd8\001\002\000\004\077\033\001\002\000\054\044\uffb1" +
    "\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053" +
    "\uffb1\054\uffb1\055\uffb1\056\uffb1\057\uffb1\060\uffb1\061\uffb1" +
    "\062\uffb1\063\uffb1\064\uffb1\067\uffb1\071\uffb1\072\uffb1\073" +
    "\uffb1\001\002\000\026\002\ufff7\007\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\040\ufff7\077\ufff7\001" +
    "\002\000\026\002\ufff5\007\023\011\014\012\030\013\022" +
    "\014\013\015\031\016\016\040\027\077\015\001\002\000" +
    "\004\002\ufff6\001\002\000\006\061\uffdf\063\041\001\002" +
    "\000\004\061\152\001\002\000\034\033\047\034\042\035" +
    "\056\040\027\041\067\042\055\043\052\061\050\075\053" +
    "\076\043\077\015\100\064\101\063\001\002\000\004\061" +
    "\147\001\002\000\046\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056" +
    "\uffc9\060\uffc9\062\uffc9\064\uffc9\067\uffc9\071\uffc9\072\uffc9" +
    "\073\uffc9\001\002\000\004\064\142\001\002\000\046\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4" +
    "\053\uffc4\054\uffc4\055\uffc4\056\uffc4\060\uffc4\062\uffc4\064" +
    "\uffc4\067\uffc4\071\uffc4\072\uffc4\073\uffc4\001\002\000\044" +
    "\044\131\045\125\046\127\047\126\050\130\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2\062\uffd2" +
    "\064\uffd2\071\uffd2\072\uffd2\073\uffd2\001\002\000\004\061" +
    "\137\001\002\000\034\033\047\034\042\035\056\040\027" +
    "\041\067\042\055\043\052\061\050\075\053\076\043\077" +
    "\015\100\064\101\063\001\002\000\046\044\uffc5\045\uffc5" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\055\uffc5\056\uffc5\060\uffc5\062\uffc5\064\uffc5\067\uffc5" +
    "\071\uffc5\072\uffc5\073\uffc5\001\002\000\004\061\120\001" +
    "\002\000\046\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca\060" +
    "\uffca\062\uffca\064\uffca\067\uffca\071\uffca\072\uffca\073\uffca" +
    "\001\002\000\050\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\056\uffdf" +
    "\060\uffdf\062\uffdf\063\041\064\uffdf\067\uffdf\071\uffdf\072" +
    "\uffdf\073\uffdf\001\002\000\004\061\114\001\002\000\004" +
    "\061\111\001\002\000\046\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3" +
    "\056\uffc3\060\uffc3\062\uffc3\064\uffc3\067\uffc3\071\uffc3\072" +
    "\uffc3\073\uffc3\001\002\000\044\044\uffcc\045\uffcc\046\uffcc" +
    "\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055" +
    "\uffcc\056\uffcc\060\uffcc\062\uffcc\064\uffcc\071\uffcc\072\uffcc" +
    "\073\uffcc\001\002\000\032\051\uffd3\052\uffd3\053\uffd3\054" +
    "\uffd3\055\uffd3\056\uffd3\060\uffd3\062\uffd3\064\uffd3\071\uffd3" +
    "\072\uffd3\073\uffd3\001\002\000\046\044\uffc1\045\uffc1\046" +
    "\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\056\uffc1\060\uffc1\062\uffc1\064\uffc1\067\uffc1\071" +
    "\uffc1\072\uffc1\073\uffc1\001\002\000\046\044\uffc8\045\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\060\uffc8\062\uffc8\064\uffc8\067\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\001\002\000\046\044\uffc7\045" +
    "\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7" +
    "\054\uffc7\055\uffc7\056\uffc7\060\uffc7\062\uffc7\064\uffc7\067" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\001\002\000\046\044\uffc0" +
    "\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\053" +
    "\uffc0\054\uffc0\055\uffc0\056\uffc0\060\uffc0\062\uffc0\064\uffc0" +
    "\067\uffc0\071\uffc0\072\uffc0\073\uffc0\001\002\000\046\044" +
    "\uffc2\045\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\060\uffc2\062\uffc2\064" +
    "\uffc2\067\uffc2\071\uffc2\072\uffc2\073\uffc2\001\002\000\004" +
    "\061\070\001\002\000\006\040\027\077\015\001\002\000" +
    "\004\062\110\001\002\000\006\061\073\062\uffb6\001\002" +
    "\000\042\027\101\030\077\033\047\034\042\035\056\040" +
    "\027\041\067\042\055\043\052\061\050\062\uffb4\075\053" +
    "\076\043\077\015\100\064\101\063\001\002\000\004\062" +
    "\uffb8\001\002\000\004\062\107\001\002\000\030\051\uffbf" +
    "\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056\uffbf\060\uffbf\062" +
    "\uffbf\071\uffbf\072\uffbf\073\uffbf\001\002\000\030\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\062" +
    "\uffbc\071\uffbc\072\uffbc\073\uffbc\001\002\000\030\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\062" +
    "\uffbe\071\uffbe\072\uffbe\073\uffbe\001\002\000\030\051\uffbd" +
    "\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\062" +
    "\uffbd\071\uffbd\072\uffbd\073\uffbd\001\002\000\006\062\uffb2" +
    "\071\104\001\002\000\004\062\uffb5\001\002\000\040\027" +
    "\101\030\077\033\047\034\042\035\056\040\027\041\067" +
    "\042\055\043\052\061\050\075\053\076\043\077\015\100" +
    "\064\101\063\001\002\000\006\062\uffb2\071\104\001\002" +
    "\000\004\062\uffb3\001\002\000\004\062\uffb7\001\002\000" +
    "\046\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9" +
    "\052\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\062" +
    "\uffb9\064\uffb9\067\uffb9\071\uffb9\072\uffb9\073\uffb9\001\002" +
    "\000\040\027\101\030\077\033\047\034\042\035\056\040" +
    "\027\041\067\042\055\043\052\061\050\075\053\076\043" +
    "\077\015\100\064\101\063\001\002\000\004\062\113\001" +
    "\002\000\046\044\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4" +
    "\051\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\060" +
    "\uffd4\062\uffd4\064\uffd4\067\uffd4\071\uffd4\072\uffd4\073\uffd4" +
    "\001\002\000\040\027\101\030\077\033\047\034\042\035" +
    "\056\040\027\041\067\042\055\043\052\061\050\075\053" +
    "\076\043\077\015\100\064\101\063\001\002\000\004\062" +
    "\116\001\002\000\046\044\uffbb\045\uffbb\046\uffbb\047\uffbb" +
    "\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055\uffbb\056" +
    "\uffbb\060\uffbb\062\uffbb\064\uffbb\067\uffbb\071\uffbb\072\uffbb" +
    "\073\uffbb\001\002\000\046\044\uffc6\045\uffc6\046\uffc6\047" +
    "\uffc6\050\uffc6\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\056\uffc6\060\uffc6\062\uffc6\064\uffc6\067\uffc6\071\uffc6\072" +
    "\uffc6\073\uffc6\001\002\000\040\027\101\030\077\033\047" +
    "\034\042\035\056\040\027\041\067\042\055\043\052\061" +
    "\050\075\053\076\043\077\015\100\064\101\063\001\002" +
    "\000\004\062\122\001\002\000\046\044\uffba\045\uffba\046" +
    "\uffba\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba" +
    "\055\uffba\056\uffba\060\uffba\062\uffba\064\uffba\067\uffba\071" +
    "\uffba\072\uffba\073\uffba\001\002\000\016\044\131\045\125" +
    "\046\127\047\126\050\130\062\124\001\002\000\044\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb" +
    "\053\uffcb\054\uffcb\055\uffcb\056\uffcb\060\uffcb\062\uffcb\064" +
    "\uffcb\071\uffcb\072\uffcb\073\uffcb\001\002\000\034\033\047" +
    "\034\042\035\056\040\027\041\067\042\055\043\052\061" +
    "\050\075\053\076\043\077\015\100\064\101\063\001\002" +
    "\000\034\033\047\034\042\035\056\040\027\041\067\042" +
    "\055\043\052\061\050\075\053\076\043\077\015\100\064" +
    "\101\063\001\002\000\034\033\047\034\042\035\056\040" +
    "\027\041\067\042\055\043\052\061\050\075\053\076\043" +
    "\077\015\100\064\101\063\001\002\000\034\033\047\034" +
    "\042\035\056\040\027\041\067\042\055\043\052\061\050" +
    "\075\053\076\043\077\015\100\064\101\063\001\002\000" +
    "\034\033\047\034\042\035\056\040\027\041\067\042\055" +
    "\043\052\061\050\075\053\076\043\077\015\100\064\101" +
    "\063\001\002\000\044\044\uffd1\045\uffd1\046\127\047\126" +
    "\050\130\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1\056" +
    "\uffd1\060\uffd1\062\uffd1\064\uffd1\071\uffd1\072\uffd1\073\uffd1" +
    "\001\002\000\044\044\uffcd\045\uffcd\046\uffcd\047\uffcd\050" +
    "\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd" +
    "\060\uffcd\062\uffcd\064\uffcd\071\uffcd\072\uffcd\073\uffcd\001" +
    "\002\000\044\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\060" +
    "\uffcf\062\uffcf\064\uffcf\071\uffcf\072\uffcf\073\uffcf\001\002" +
    "\000\044\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce\051" +
    "\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\060\uffce" +
    "\062\uffce\064\uffce\071\uffce\072\uffce\073\uffce\001\002\000" +
    "\044\044\uffd0\045\uffd0\046\127\047\126\050\130\051\uffd0" +
    "\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\060\uffd0\062" +
    "\uffd0\064\uffd0\071\uffd0\072\uffd0\073\uffd0\001\002\000\040" +
    "\027\101\030\077\033\047\034\042\035\056\040\027\041" +
    "\067\042\055\043\052\061\050\075\053\076\043\077\015" +
    "\100\064\101\063\001\002\000\004\062\141\001\002\000" +
    "\046\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\062" +
    "\uffd6\064\uffd6\067\uffd6\071\uffd6\072\uffd6\073\uffd6\001\002" +
    "\000\056\010\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd" +
    "\057\uffdd\060\uffdd\061\uffdd\062\uffdd\063\144\064\uffdd\067" +
    "\uffdd\071\uffdd\072\uffdd\073\uffdd\001\002\000\054\010\uffe0" +
    "\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052" +
    "\uffe0\053\uffe0\054\uffe0\055\uffe0\056\uffe0\057\uffe0\060\uffe0" +
    "\061\uffe0\062\uffe0\064\uffe0\067\uffe0\071\uffe0\072\uffe0\073" +
    "\uffe0\001\002\000\034\033\047\034\042\035\056\040\027" +
    "\041\067\042\055\043\052\061\050\075\053\076\043\077" +
    "\015\100\064\101\063\001\002\000\004\064\146\001\002" +
    "\000\054\010\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\061\uffde\062\uffde\064\uffde\067\uffde\071" +
    "\uffde\072\uffde\073\uffde\001\002\000\040\027\101\030\077" +
    "\033\047\034\042\035\056\040\027\041\067\042\055\043" +
    "\052\061\050\075\053\076\043\077\015\100\064\101\063" +
    "\001\002\000\004\062\151\001\002\000\046\044\uffd5\045" +
    "\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5" +
    "\054\uffd5\055\uffd5\056\uffd5\060\uffd5\062\uffd5\064\uffd5\067" +
    "\uffd5\071\uffd5\072\uffd5\073\uffd5\001\002\000\020\011\014" +
    "\012\030\013\022\014\013\015\031\016\016\062\uffe9\001" +
    "\002\000\004\062\163\001\002\000\004\077\155\001\002" +
    "\000\006\062\uffe7\071\157\001\002\000\004\062\uffea\001" +
    "\002\000\016\011\014\012\030\013\022\014\013\015\031" +
    "\016\016\001\002\000\004\077\161\001\002\000\006\062" +
    "\uffe7\071\157\001\002\000\004\062\uffe8\001\002\000\004" +
    "\065\164\001\002\000\030\007\023\017\200\021\165\022" +
    "\202\023\172\036\176\037\174\040\027\066\uffec\077\015" +
    "\102\uffec\001\002\000\004\061\346\001\002\000\032\007" +
    "\023\017\200\021\165\022\202\023\172\026\uffec\036\176" +
    "\037\174\040\027\066\uffec\077\015\102\uffec\001\002\000" +
    "\004\060\343\001\002\000\004\060\341\001\002\000\032" +
    "\007\023\017\200\021\165\022\202\023\172\026\uffec\036" +
    "\176\037\174\040\027\066\uffec\077\015\102\uffec\001\002" +
    "\000\004\061\304\001\002\000\032\007\023\017\200\021" +
    "\165\022\202\023\172\026\uffec\036\176\037\174\040\027" +
    "\066\uffec\077\015\102\uffec\001\002\000\006\040\027\077" +
    "\015\001\002\000\006\066\uffe5\102\272\001\002\000\004" +
    "\061\262\001\002\000\004\060\260\001\002\000\004\061" +
    "\244\001\002\000\004\060\242\001\002\000\004\061\205" +
    "\001\002\000\032\007\023\017\200\021\165\022\202\023" +
    "\172\026\uffec\036\176\037\174\040\027\066\uffec\077\015" +
    "\102\uffec\001\002\000\010\026\ufff1\066\ufff1\102\ufff1\001" +
    "\002\000\042\027\101\030\077\033\047\034\042\035\056" +
    "\040\027\041\067\042\055\043\052\061\206\074\207\075" +
    "\053\076\043\077\015\100\064\101\063\001\002\000\042" +
    "\027\101\030\077\033\047\034\042\035\056\040\027\041" +
    "\067\042\055\043\052\061\206\074\207\075\053\076\043" +
    "\077\015\100\064\101\063\001\002\000\004\061\234\001" +
    "\002\000\010\062\223\072\224\073\225\001\002\000\016" +
    "\051\215\052\217\053\221\054\220\055\213\056\216\001" +
    "\002\000\012\060\uffa7\062\uffa7\072\uffa7\073\uffa7\001\002" +
    "\000\040\027\uffa1\030\uffa1\033\uffa1\034\uffa1\035\uffa1\040" +
    "\uffa1\041\uffa1\042\uffa1\043\uffa1\061\uffa1\075\uffa1\076\uffa1" +
    "\077\uffa1\100\uffa1\101\uffa1\001\002\000\040\027\101\030" +
    "\077\033\047\034\042\035\056\040\027\041\067\042\055" +
    "\043\052\061\050\075\053\076\043\077\015\100\064\101" +
    "\063\001\002\000\040\027\uffa5\030\uffa5\033\uffa5\034\uffa5" +
    "\035\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5\061\uffa5\075" +
    "\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\001\002\000\040" +
    "\027\uffa0\030\uffa0\033\uffa0\034\uffa0\035\uffa0\040\uffa0\041" +
    "\uffa0\042\uffa0\043\uffa0\061\uffa0\075\uffa0\076\uffa0\077\uffa0" +
    "\100\uffa0\101\uffa0\001\002\000\040\027\uffa4\030\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\061\uffa4\075\uffa4\076\uffa4\077\uffa4\100\uffa4\101\uffa4\001" +
    "\002\000\040\027\uffa2\030\uffa2\033\uffa2\034\uffa2\035\uffa2" +
    "\040\uffa2\041\uffa2\042\uffa2\043\uffa2\061\uffa2\075\uffa2\076" +
    "\uffa2\077\uffa2\100\uffa2\101\uffa2\001\002\000\040\027\uffa3" +
    "\030\uffa3\033\uffa3\034\uffa3\035\uffa3\040\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\061\uffa3\075\uffa3\076\uffa3\077\uffa3\100\uffa3" +
    "\101\uffa3\001\002\000\012\060\uffa6\062\uffa6\072\uffa6\073" +
    "\uffa6\001\002\000\004\065\uff9d\001\002\000\042\027\101" +
    "\030\077\033\047\034\042\035\056\040\027\041\067\042" +
    "\055\043\052\061\206\074\207\075\053\076\043\077\015" +
    "\100\064\101\063\001\002\000\042\027\101\030\077\033" +
    "\047\034\042\035\056\040\027\041\067\042\055\043\052" +
    "\061\206\074\207\075\053\076\043\077\015\100\064\101" +
    "\063\001\002\000\012\060\uffaa\062\uffaa\072\uffaa\073\uffaa" +
    "\001\002\000\012\060\uffab\062\uffab\072\uffab\073\225\001" +
    "\002\000\004\065\231\001\002\000\026\007\023\017\200" +
    "\021\165\022\202\023\172\036\176\037\174\040\027\066" +
    "\uffec\077\015\001\002\000\004\066\233\001\002\000\032" +
    "\007\uff9c\017\uff9c\021\uff9c\022\uff9c\023\uff9c\026\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\066\uff9c\077\uff9c\102\uff9c\001\002" +
    "\000\042\027\101\030\077\033\047\034\042\035\056\040" +
    "\027\041\067\042\055\043\052\061\206\074\207\075\053" +
    "\076\043\077\015\100\064\101\063\001\002\000\010\062" +
    "\236\072\224\073\225\001\002\000\012\060\uffa9\062\uffa9" +
    "\072\uffa9\073\uffa9\001\002\000\032\044\131\045\125\046" +
    "\127\047\126\050\130\051\uffd2\052\uffd2\053\uffd2\054\uffd2" +
    "\055\uffd2\056\uffd2\062\124\001\002\000\010\062\241\072" +
    "\224\073\225\001\002\000\012\060\uffa8\062\uffa8\072\uffa8" +
    "\073\uffa8\001\002\000\032\007\023\017\200\021\165\022" +
    "\202\023\172\026\uffec\036\176\037\174\040\027\066\uffec" +
    "\077\015\102\uffec\001\002\000\010\026\ufff4\066\ufff4\102" +
    "\ufff4\001\002\000\042\027\101\030\077\033\047\034\042" +
    "\035\056\040\027\041\067\042\055\043\052\061\206\074" +
    "\207\075\053\076\043\077\015\100\064\101\063\001\002" +
    "\000\010\062\246\072\224\073\225\001\002\000\004\065" +
    "\uffaf\001\002\000\004\065\250\001\002\000\026\007\023" +
    "\017\200\021\165\022\202\023\172\036\176\037\174\040" +
    "\027\066\uffec\077\015\001\002\000\004\066\252\001\002" +
    "\000\034\007\uffac\017\uffac\020\253\021\uffac\022\uffac\023" +
    "\uffac\026\uffac\036\uffac\037\uffac\040\uffac\066\uffac\077\uffac" +
    "\102\uffac\001\002\000\004\065\255\001\002\000\032\007" +
    "\uffae\017\uffae\021\uffae\022\uffae\023\uffae\026\uffae\036\uffae" +
    "\037\uffae\040\uffae\066\uffae\077\uffae\102\uffae\001\002\000" +
    "\026\007\023\017\200\021\165\022\202\023\172\036\176" +
    "\037\174\040\027\066\uffec\077\015\001\002\000\004\066" +
    "\257\001\002\000\032\007\uffad\017\uffad\021\uffad\022\uffad" +
    "\023\uffad\026\uffad\036\uffad\037\uffad\040\uffad\066\uffad\077" +
    "\uffad\102\uffad\001\002\000\032\007\023\017\200\021\165" +
    "\022\202\023\172\026\uffec\036\176\037\174\040\027\066" +
    "\uffec\077\015\102\uffec\001\002\000\010\026\ufff3\066\ufff3" +
    "\102\ufff3\001\002\000\040\027\101\030\077\033\047\034" +
    "\042\035\056\040\027\041\067\042\055\043\052\061\050" +
    "\075\053\076\043\077\015\100\064\101\063\001\002\000" +
    "\004\062\271\001\002\000\006\062\uff90\071\266\001\002" +
    "\000\004\062\uff92\001\002\000\040\027\101\030\077\033" +
    "\047\034\042\035\056\040\027\041\067\042\055\043\052" +
    "\061\050\075\053\076\043\077\015\100\064\101\063\001" +
    "\002\000\006\062\uff90\071\266\001\002\000\004\062\uff91" +
    "\001\002\000\004\060\uff93\001\002\000\040\027\101\030" +
    "\077\033\047\034\042\035\056\040\027\041\067\042\055" +
    "\043\052\061\050\075\053\076\043\077\015\100\064\101" +
    "\063\001\002\000\004\066\274\001\002\000\026\002\uffeb" +
    "\007\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\040\uffeb\077\uffeb\001\002\000\004\060\276\001\002" +
    "\000\004\066\uffe6\001\002\000\004\061\300\001\002\000" +
    "\042\027\101\030\077\033\047\034\042\035\056\040\027" +
    "\041\067\042\055\043\052\061\050\062\uffb4\075\053\076" +
    "\043\077\015\100\064\101\063\001\002\000\004\062\302" +
    "\001\002\000\004\060\uff8f\001\002\000\010\026\ufff2\066" +
    "\ufff2\102\ufff2\001\002\000\006\040\027\077\015\001\002" +
    "\000\006\062\uffdf\063\041\001\002\000\004\062\307\001" +
    "\002\000\004\065\uff9b\001\002\000\004\065\311\001\002" +
    "\000\004\024\313\001\002\000\004\066\337\001\002\000" +
    "\032\033\047\034\042\035\056\040\027\041\067\042\055" +
    "\043\052\075\053\076\043\077\015\100\064\101\063\001" +
    "\002\000\004\067\315\001\002\000\026\007\023\017\200" +
    "\021\165\022\202\023\172\026\uffec\036\176\037\174\040" +
    "\027\077\015\001\002\000\004\026\317\001\002\000\004" +
    "\060\320\001\002\000\010\024\322\025\uff97\066\uff97\001" +
    "\002\000\006\025\332\066\uff94\001\002\000\032\033\047" +
    "\034\042\035\056\040\027\041\067\042\055\043\052\075" +
    "\053\076\043\077\015\100\064\101\063\001\002\000\004" +
    "\067\324\001\002\000\026\007\023\017\200\021\165\022" +
    "\202\023\172\026\uffec\036\176\037\174\040\027\077\015" +
    "\001\002\000\004\026\326\001\002\000\004\060\327\001" +
    "\002\000\010\024\322\025\uff97\066\uff97\001\002\000\006" +
    "\025\uff98\066\uff98\001\002\000\004\066\uff99\001\002\000" +
    "\004\067\333\001\002\000\026\007\023\017\200\021\165" +
    "\022\202\023\172\026\uffec\036\176\037\174\040\027\077" +
    "\015\001\002\000\004\026\335\001\002\000\004\060\336" +
    "\001\002\000\004\066\uff95\001\002\000\032\007\uff9a\017" +
    "\uff9a\021\uff9a\022\uff9a\023\uff9a\026\uff9a\036\uff9a\037\uff9a" +
    "\040\uff9a\066\uff9a\077\uff9a\102\uff9a\001\002\000\010\026" +
    "\uffef\066\uffef\102\uffef\001\002\000\032\007\023\017\200" +
    "\021\165\022\202\023\172\026\uffec\036\176\037\174\040" +
    "\027\066\uffec\077\015\102\uffec\001\002\000\010\026\uffee" +
    "\066\uffee\102\uffee\001\002\000\032\007\023\017\200\021" +
    "\165\022\202\023\172\026\uffec\036\176\037\174\040\027" +
    "\066\uffec\077\015\102\uffec\001\002\000\010\026\uffed\066" +
    "\uffed\102\uffed\001\002\000\010\026\ufff0\066\ufff0\102\ufff0" +
    "\001\002\000\006\040\027\077\015\001\002\000\004\060" +
    "\350\001\002\000\042\027\101\030\077\033\047\034\042" +
    "\035\056\040\027\041\067\042\055\043\052\061\206\074" +
    "\207\075\053\076\043\077\015\100\064\101\063\001\002" +
    "\000\010\060\352\072\224\073\225\001\002\000\006\040" +
    "\027\077\015\001\002\000\004\062\354\001\002\000\004" +
    "\065\uff9f\001\002\000\004\065\356\001\002\000\026\007" +
    "\023\017\200\021\165\022\202\023\172\036\176\037\174" +
    "\040\027\066\uffec\077\015\001\002\000\004\066\360\001" +
    "\002\000\032\007\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\026\uff9e\036\uff9e\037\uff9e\040\uff9e\066\uff9e\077\uff9e\102" +
    "\uff9e\001\002\000\010\010\uffdf\063\041\071\uffdf\001\002" +
    "\000\006\010\uffe1\071\364\001\002\000\004\010\370\001" +
    "\002\000\004\077\365\001\002\000\010\010\uffdf\063\041" +
    "\071\uffdf\001\002\000\006\010\uffe1\071\364\001\002\000" +
    "\004\010\uffe2\001\002\000\016\011\014\012\030\013\022" +
    "\014\013\015\031\016\016\001\002\000\004\060\uffe3\001" +
    "\002\000\026\002\ufffb\007\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\014\ufffb\015\ufffb\016\ufffb\040\ufffb\077\ufffb\001\002\000" +
    "\026\002\ufff5\007\023\011\014\012\030\013\022\014\013" +
    "\015\031\016\016\040\027\077\015\001\002\000\004\002" +
    "\ufffa\001\002\000\026\002\ufff5\007\023\011\014\012\030" +
    "\013\022\014\013\015\031\016\016\040\027\077\015\001" +
    "\002\000\004\002\ufff8\001\002\000\004\057\u0100\001\002" +
    "\000\040\027\101\030\077\033\047\034\042\035\056\040" +
    "\027\041\067\042\055\043\052\061\050\075\053\076\043" +
    "\077\015\100\064\101\063\001\002\000\006\060\uffe4\062" +
    "\uffe4\001\002\000\004\070\u0103\001\002\000\004\006\u0104" +
    "\001\002\000\004\060\u0105\001\002\000\030\002\ufffc\005" +
    "\011\007\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc" +
    "\016\ufffc\040\ufffc\077\ufffc\001\002\000\026\002\ufffd\007" +
    "\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd\016\ufffd" +
    "\040\ufffd\077\ufffd\001\002\000\004\032\u0108\001\002\000" +
    "\004\067\u0109\001\002\000\004\077\u010a\001\002\000\004" +
    "\070\u010b\001\002\000\004\006\u010c\001\002\000\030\002" +
    "\ufffe\005\ufffe\007\ufffe\011\ufffe\012\ufffe\013\ufffe\014\ufffe" +
    "\015\ufffe\016\ufffe\040\ufffe\077\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\010\003\005\004\006\005\004\001\001\000" +
    "\002\001\001\000\004\006\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\020\013\023\017\024\021\017\026\025\036\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\376\001\001\000\004" +
    "\065\374\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\034" +
    "\001\001\000\016\007\020\013\023\017\035\021\017\026" +
    "\025\036\016\001\001\000\002\001\001\000\004\011\037" +
    "\001\001\000\002\001\001\000\030\014\044\015\056\016" +
    "\065\025\043\027\057\032\050\036\053\054\064\055\061" +
    "\062\060\063\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\014\044\015\056\016\065\027" +
    "\057\032\050\036\053\054\064\055\061\063\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\036" +
    "\071\061\070\001\001\000\002\001\001\000\004\033\073" +
    "\001\001\000\036\014\044\015\056\016\065\025\075\027" +
    "\057\030\101\031\077\032\050\034\074\036\053\054\064" +
    "\055\061\062\060\063\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\035\102\001\001\000" +
    "\002\001\001\000\034\014\044\015\056\016\065\025\075" +
    "\027\057\030\104\031\077\032\050\036\053\054\064\055" +
    "\061\062\060\063\045\001\001\000\004\035\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\014\044\015\056\016\065\025\075\027\057\030\111" +
    "\031\077\032\050\036\053\054\064\055\061\062\060\063" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\044\015\056\016\065\025\075\027\057\030\114\031" +
    "\077\032\050\036\053\054\064\055\061\062\060\063\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\014\044\015\056\016\065\025\075\027\057" +
    "\030\120\031\077\032\050\036\053\054\064\055\061\062" +
    "\060\063\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\044\015" +
    "\056\016\065\027\057\032\050\036\053\054\064\055\061" +
    "\063\135\001\001\000\024\014\044\015\056\016\065\027" +
    "\057\032\050\036\053\054\064\055\061\063\134\001\001" +
    "\000\024\014\044\015\056\016\065\027\057\032\050\036" +
    "\053\054\064\055\061\063\133\001\001\000\024\014\044" +
    "\015\056\016\065\027\057\032\050\036\053\054\064\055" +
    "\061\063\132\001\001\000\024\014\044\015\056\016\065" +
    "\027\057\032\050\036\053\054\064\055\061\063\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\014\044\015" +
    "\056\016\065\025\075\027\057\030\137\031\077\032\050" +
    "\036\053\054\064\055\061\062\060\063\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\142\001\001" +
    "\000\002\001\001\000\030\014\044\015\056\016\065\025" +
    "\144\027\057\032\050\036\053\054\064\055\061\062\060" +
    "\063\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\014\044\015\056\016\065\025\075\027\057\030\147" +
    "\031\077\032\050\036\053\054\064\055\061\062\060\063" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\153\022\152\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\155\001\001\000\002\001\001\000\004" +
    "\013\157\001\001\000\002\001\001\000\004\023\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\200" +
    "\020\174\026\176\036\016\037\172\044\202\045\165\046" +
    "\170\052\167\053\166\001\001\000\002\001\001\000\026" +
    "\007\200\020\344\026\176\036\016\037\172\044\202\045" +
    "\165\046\170\052\167\053\166\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\200\020\337\026\176\036" +
    "\016\037\172\044\202\045\165\046\170\052\167\053\166" +
    "\001\001\000\002\001\001\000\026\007\200\020\302\026" +
    "\176\036\016\037\172\044\202\045\165\046\170\052\167" +
    "\053\166\001\001\000\004\036\276\001\001\000\004\024" +
    "\272\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\200\020\203\026\176\036\016\037\172\044\202\045\165" +
    "\046\170\052\167\053\166\001\001\000\002\001\001\000" +
    "\040\014\044\015\056\016\065\025\075\027\057\030\210" +
    "\031\077\032\050\036\053\041\207\042\211\054\064\055" +
    "\061\062\060\063\045\001\001\000\040\014\044\015\056" +
    "\016\065\025\075\027\057\030\210\031\077\032\050\036" +
    "\053\041\237\042\211\054\064\055\061\062\060\063\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\213\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\044\015\056\016\065\025\075\027\057\030\221\031" +
    "\077\032\050\036\053\054\064\055\061\062\060\063\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\227\001\001\000\040\014\044\015\056\016" +
    "\065\025\075\027\057\030\210\031\077\032\050\036\053" +
    "\041\226\042\211\054\064\055\061\062\060\063\045\001" +
    "\001\000\040\014\044\015\056\016\065\025\075\027\057" +
    "\030\210\031\077\032\050\036\053\041\225\042\211\054" +
    "\064\055\061\062\060\063\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\200\020" +
    "\231\026\176\036\016\037\172\044\202\045\165\046\170" +
    "\052\167\053\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\014\044\015\056\016\065\025\075\027\057" +
    "\030\210\031\077\032\050\036\053\041\234\042\211\054" +
    "\064\055\061\062\060\063\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\200\020\242\026\176\036\016" +
    "\037\172\044\202\045\165\046\170\052\167\053\166\001" +
    "\001\000\002\001\001\000\040\014\044\015\056\016\065" +
    "\025\075\027\057\030\210\031\077\032\050\036\053\041" +
    "\244\042\211\054\064\055\061\062\060\063\045\001\001" +
    "\000\002\001\001\000\004\067\246\001\001\000\002\001" +
    "\001\000\026\007\200\020\250\026\176\036\016\037\172" +
    "\044\202\045\165\046\170\052\167\053\166\001\001\000" +
    "\002\001\001\000\004\040\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\007\200\020\255\026\176\036" +
    "\016\037\172\044\202\045\165\046\170\052\167\053\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\200\020\260\026\176\036\016\037\172\044\202\045\165" +
    "\046\170\052\167\053\166\001\001\000\002\001\001\000" +
    "\036\014\044\015\056\016\065\025\075\027\057\030\263" +
    "\031\077\032\050\036\053\054\064\055\061\056\262\062" +
    "\060\063\045\001\001\000\002\001\001\000\004\057\264" +
    "\001\001\000\002\001\001\000\034\014\044\015\056\016" +
    "\065\025\075\027\057\030\266\031\077\032\050\036\053" +
    "\054\064\055\061\062\060\063\045\001\001\000\004\057" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\014\044\015\056\016\065\025\075\027\057\030\274\031" +
    "\077\032\050\036\053\054\064\055\061\062\060\063\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\014\044" +
    "\015\056\016\065\025\075\027\057\030\101\031\077\032" +
    "\050\034\300\036\053\054\064\055\061\062\060\063\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\304\001\001\000\004\011\305\001\001" +
    "\000\002\001\001\000\004\072\307\001\001\000\002\001" +
    "\001\000\004\047\311\001\001\000\002\001\001\000\022" +
    "\014\044\015\056\016\065\027\313\032\050\036\053\054" +
    "\064\055\061\001\001\000\002\001\001\000\026\007\200" +
    "\020\315\026\176\036\016\037\172\044\202\045\165\046" +
    "\170\052\167\053\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\050\320\001\001\000\004\051\330\001" +
    "\001\000\022\014\044\015\056\016\065\027\322\032\050" +
    "\036\053\054\064\055\061\001\001\000\002\001\001\000" +
    "\026\007\200\020\324\026\176\036\016\037\172\044\202" +
    "\045\165\046\170\052\167\053\166\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\327\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\200\020\333\026\176\036\016\037\172\044\202\045\165" +
    "\046\170\052\167\053\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\200\020\341\026\176\036\016\037" +
    "\172\044\202\045\165\046\170\052\167\053\166\001\001" +
    "\000\002\001\001\000\026\007\200\020\343\026\176\036" +
    "\016\037\172\044\202\045\165\046\170\052\167\053\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\346\036\016\001\001\000\002\001\001\000\040\014\044" +
    "\015\056\016\065\025\075\027\057\030\210\031\077\032" +
    "\050\036\053\041\350\042\211\054\064\055\061\062\060" +
    "\063\045\001\001\000\002\001\001\000\006\026\352\036" +
    "\016\001\001\000\002\001\001\000\004\070\354\001\001" +
    "\000\002\001\001\000\026\007\200\020\356\026\176\036" +
    "\016\037\172\044\202\045\165\046\170\052\167\053\166" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\361\001\001\000\004\010\362\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\365\001\001\000\004\010" +
    "\366\001\001\000\002\001\001\000\004\013\370\001\001" +
    "\000\002\001\001\000\004\064\372\001\001\000\016\007" +
    "\020\013\023\017\373\021\017\026\025\036\016\001\001" +
    "\000\002\001\001\000\016\007\020\013\023\017\375\021" +
    "\017\026\025\036\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\014\044\015\056\016\065\025\075\027" +
    "\057\030\u0100\031\077\032\050\036\053\054\064\055\061" +
    "\062\060\063\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0105" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$FunParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$FunParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$FunParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    /**Metodo al que se llama automaticamente ante algun error sintáctico.*/
    public void syntax_error(Symbol s)
    {
        //Metodos.addError("sintactico", (s.right+1), s.left, "Identificador \"" +s.value + "\" no reconocido por la gramatica");
        System.out.println("Error sintactico en la Fila " + (s.right+1) +" Columna "+s.left+ ". Identificador \"" +s.value + "\" no reconocido." );
    }

    /**Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores.*/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    { 
        //Metodos.addError("sintactico", (s.right+1), s.left, "Identificador \"" +s.value + "\" no reconocido por la gramatica");
        System.out.println("Error sintactico en la Fila " + (s.right+1)+ " Columna "+s.left+". Identificador \"" + s.value + "\" no reconocido."); 
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$FunParser$actions {


    int nvl = 0;
    String nombreArchivo ="";

  private final FunParser parser;

  /** Constructor */
  CUP$FunParser$actions(FunParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$FunParser$do_action(
    int                        CUP$FunParser$act_num,
    java_cup.runtime.lr_parser CUP$FunParser$parser,
    java.util.Stack            CUP$FunParser$stack,
    int                        CUP$FunParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$FunParser$result;

      /* select the action based on the action number */
      switch (CUP$FunParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CALL ::= tcall VARIABLE tpa ARGUMENTOS tpc 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(41/*CALL*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // IMPRIMIR_ARGS2 ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList<Instruccion>(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(45/*IMPRIMIR_ARGS2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // IMPRIMIR_ARGS2 ::= tcoma VALOR IMPRIMIR_ARGS2 
            {
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)val); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(45/*IMPRIMIR_ARGS2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // IMPRIMIR_ARGS ::= VALOR IMPRIMIR_ARGS2 
            {
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)val); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(44/*IMPRIMIR_ARGS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // IMPRIMIR ::= timprimir tpa IMPRIMIR_ARGS tpc 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; Imprimir imp = new Imprimir((ArrayList<Instruccion>)lista); RESULT = imp; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(40/*IMPRIMIR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DEFAULT ::= 
            {
              Object RESULT = null;
		 RESULT = new Case(new Cadena("nodefault"), null ); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(39/*DEFAULT*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DEFAULT ::= tdefault tdospuntos INSTRUCCIONESLOW tbreak tpuntocoma 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		 RESULT = new Case(new Cadena("default"), (ArrayList<Instruccion>)l ); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(39/*DEFAULT*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CASE_ARGS ::= OPERACION tcaracter 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(46/*CASE_ARGS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CASES2 ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList<Case>(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(38/*CASES2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CASES2 ::= tcase NUM tdospuntos INSTRUCCIONESLOW tbreak tpuntocoma CASES2 
            {
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Case> listaCase = (ArrayList<Case>)c; Case caso = new Case((Instruccion)val, (ArrayList<Instruccion>)l ); listaCase.add(0, caso); RESULT = listaCase; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(38/*CASES2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASES ::= tcase NUM tdospuntos INSTRUCCIONESLOW tbreak tpuntocoma CASES2 DEFAULT 
            {
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int dcleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int dcright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object dc = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Case> listaCase = (ArrayList<Case>)c; Case caso = new Case((Instruccion)val, (ArrayList<Instruccion>)l ); listaCase.add(0, caso); listaCase.add((Case)dc); RESULT = listaCase; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(37/*CASES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // SWITCH ::= tswitch tpa VARIABLE VECTOR tpc NT$6 tla CASES tlc 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;
		int vtleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).value;
		int lcleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int lcright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object lc = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 VariableThis varthis = (VariableThis)vt; Variable var = new Variable(nombreArchivo, "fun", varthis.id, varthis.isThis, (Instruccion)vec, nvl, vtleft, vtright); SentenciaSwitch senswi = new SentenciaSwitch((Instruccion)var, (ArrayList<Case>)lc ); Metodos.cleanVariables(nombreArchivo, "fun", nvl); nvl--; senswi.operar(); RESULT = senswi; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(36/*SWITCH*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$6 ::= 
            {
              Object RESULT = null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
 nvl++; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(56/*NT$6*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WHILE ::= twhile tpa CONDICIONES tpc NT$5 tla INSTRUCCIONESLOW tlc 
            {
              Object RESULT = null;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;
		int reqleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 Metodos.cleanVariables(nombreArchivo, "fun", nvl); nvl--; RESULT = new SentenciaWhile((Instruccion)req, (ArrayList<Instruccion>)l ); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(35/*WHILE*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$5 ::= 
            {
              Object RESULT = null;
		int reqleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
 nvl++; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(55/*NT$5*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FOR ::= tfor tpa ASIGNACION tpuntocoma CONDICIONES tpuntocoma ASIGNACION tpc NT$4 tla INSTRUCCIONESLOW tlc 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;
		int inileft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-9)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-9)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-9)).value;
		int reqleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 SentenciaFor senfor = new SentenciaFor((Instruccion)ini, (Instruccion)req, (Instruccion) inc, (ArrayList<Instruccion>)l); Metodos.cleanVariables(nombreArchivo, "fun", nvl);  nvl--; RESULT = senfor; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(34/*FOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-11)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$4 ::= 
            {
              Object RESULT = null;
		int inileft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).right;
		Object ini = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).value;
		int reqleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left;
		int reqright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).right;
		Object req = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;
		int incleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object inc = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
 nvl++; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(54/*NT$4*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // OP_COMPARADOR ::= tdiferente 
            {
              Object RESULT = null;
		 RESULT = new String ("<>"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(33/*OP_COMPARADOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // OP_COMPARADOR ::= tigualigual 
            {
              Object RESULT = null;
		 RESULT = new String ("=="); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(33/*OP_COMPARADOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP_COMPARADOR ::= tmayorigual 
            {
              Object RESULT = null;
		 RESULT = new String (">="); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(33/*OP_COMPARADOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP_COMPARADOR ::= tmenorigual 
            {
              Object RESULT = null;
		 RESULT = new String ("<="); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(33/*OP_COMPARADOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP_COMPARADOR ::= tmayor 
            {
              Object RESULT = null;
		 RESULT = new String (">"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(33/*OP_COMPARADOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP_COMPARADOR ::= tmenor 
            {
              Object RESULT = null;
		 RESULT = new String ("<"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(33/*OP_COMPARADOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CONDICION ::= VALOR OP_COMPARADOR VALOR 
            {
              Object RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object val1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object val2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new Requisito((Instruccion)val1, (String)op, (Instruccion)val2 ); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(32/*CONDICION*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CONDICIONES ::= CONDICION 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion ins = (Instruccion)e; RESULT = new CondicionIf("nada", ins, null); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(31/*CONDICIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CONDICIONES ::= tpa CONDICIONES tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 Instruccion ins = (Instruccion)e; RESULT = new CondicionIf("nada", ins, null); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(31/*CONDICIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CONDICIONES ::= tno tpa CONDICIONES tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 Instruccion ins = (Instruccion)e; RESULT = new CondicionIf("not", ins, null); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(31/*CONDICIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CONDICIONES ::= CONDICIONES tand CONDICIONES 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion ins1 = (Instruccion)e1; Instruccion ins2 = (Instruccion)e2; RESULT = new CondicionIf("and", ins1, ins2); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(31/*CONDICIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CONDICIONES ::= CONDICIONES tor CONDICIONES 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion ins1 = (Instruccion)e1; Instruccion ins2 = (Instruccion)e2; RESULT = new CondicionIf("or", ins1, ins2); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(31/*CONDICIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(30/*ELSE*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE ::= telse tla INSTRUCCIONESLOW tlc 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = l; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(30/*ELSE*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= tif tpa CONDICIONES tpc NT$3 tla INSTRUCCIONESLOW tlc ELSE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object l1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 SentenciaIf senif = new SentenciaIf((Instruccion)cond, (ArrayList<Instruccion>)l1, (ArrayList<Instruccion>)l2 ); Metodos.cleanVariables(nombreArchivo, "fun", nvl);  nvl--; RESULT = senif; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(29/*IF*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-8)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$3 ::= 
            {
              Object RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
 nvl++; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(53/*NT$3*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLE ::= tiden 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new VariableThis((String)id, false); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(28/*VARIABLE*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLE ::= tthis tpunto tiden 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new VariableThis((String)id, true); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(28/*VARIABLE*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARGUMENTOS2 ::= 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(27/*ARGUMENTOS2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARGUMENTOS2 ::= tcoma VALOR ARGUMENTOS2 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(27/*ARGUMENTOS2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARGUMENTOS ::= 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(26/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARGUMENTOS ::= VALOR ARGUMENTOS2 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(26/*ARGUMENTOS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FUNCION ::= 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(25/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FUNCION ::= tpa ARGUMENTOS tpc 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(25/*FUNCION*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // VALUE_ARGS ::= VARIABLE FUNCION 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(47/*VALUE_ARGS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // VALUE ::= tvalue tpa VALUE_ARGS tpc 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(24/*VALUE*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MAYUS ::= tmayus tpa VALOR tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = new Mayus((Instruccion)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(43/*MAYUS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MINUS ::= tminus tpa VALOR tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = new Minus((Instruccion)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(42/*MINUS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // BOOLEAN ::= tfalse 
            {
              Object RESULT = null;
		 RESULT = new Booleano("false"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(23/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // BOOLEAN ::= ttrue 
            {
              Object RESULT = null;
		 RESULT = new Booleano("true"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(23/*BOOLEAN*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // VALOR ::= BOOLEAN 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(22/*VALOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALOR ::= OPERACION 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(22/*VALOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NUM ::= MINUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NUM ::= MAYUS 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NUM ::= PASAR_STRING 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NUM ::= PASAR_FLOAT 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // NUM ::= PASAR_ENTERO 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NUM ::= VALUE 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NUM ::= VARIABLE VECTOR 
            {
              Object RESULT = null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 VariableThis varthis = (VariableThis)vt; Variable var = new Variable(nombreArchivo, "fun", varthis.id, varthis.isThis, (Instruccion)vec, nvl, vtleft, vtright); RESULT = var; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // NUM ::= tcaracter 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new Caracter((String)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NUM ::= tcadena 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new Cadena((String)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NUM ::= tdecimal 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new Decimal((String)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NUM ::= tentero 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new Entero((String)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(21/*NUM*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= tpa expr tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = (Instruccion)e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= NUM 
            {
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = (Instruccion)n; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr tconcat expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion val1 = (Instruccion)e1; Instruccion val2 = (Instruccion)e2; RESULT = new Concatenacion(val1, val2); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr tdividir expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion val1 = (Instruccion)e1; Instruccion val2 = (Instruccion)e2; Operacion op = new Operacion("/", val1, val2, e2left, e2right); RESULT = op; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr tpor expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion val1 = (Instruccion)e1; Instruccion val2 = (Instruccion)e2; Operacion op  = new Operacion("*", val1, val2, e2left, e2right); RESULT = op;    
              CUP$FunParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr tmenos expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion val1 = (Instruccion)e1; Instruccion val2 = (Instruccion)e2; Operacion op  = new Operacion("-", val1, val2, e2left, e2right); RESULT = op;  
              CUP$FunParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= expr tmas expr 
            {
              Object RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion val1 = (Instruccion)e1; Instruccion val2 = (Instruccion)e2; Operacion op = new Operacion("+", val1, val2, e2left, e2right); RESULT = op;      
              CUP$FunParser$result = new java_cup.runtime.Symbol(49/*expr*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr_part ::= expr 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = (Instruccion)e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(48/*expr_part*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERACION ::= expr_part 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 Instruccion val = (Instruccion)e; val.operar(); System.out.println("Resultado " + val.result); RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(19/*OPERACION*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PASAR_STRING ::= tpasstring tpa VALOR tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = new PasarString((Instruccion)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(12/*PASAR_STRING*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // PASAR_FLOAT ::= tpasfloat tpa VALOR tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = new PasarFloat((Instruccion)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(11/*PASAR_FLOAT*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // PASAR_ENTERO ::= tpasentero tpa VALOR tpc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = new PasarEntero((Instruccion)e); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(10/*PASAR_ENTERO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPO ::= tvoid 
            {
              Object RESULT = null;
		 RESULT = new String ("void"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(9/*TIPO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPO ::= tchar 
            {
              Object RESULT = null;
		 RESULT = new String ("char"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(9/*TIPO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TIPO ::= tbool 
            {
              Object RESULT = null;
		 RESULT = new String ("boolean"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(9/*TIPO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TIPO ::= tstring 
            {
              Object RESULT = null;
		 RESULT = new String ("string"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(9/*TIPO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TIPO ::= tfloat 
            {
              Object RESULT = null;
		 RESULT = new String ("float"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(9/*TIPO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TIPO ::= tint 
            {
              Object RESULT = null;
		 RESULT = new String ("int"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(9/*TIPO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VECTOR2 ::= 
            {
              Object RESULT = null;
		 RESULT = new Entero("0"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(8/*VECTOR2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VECTOR2 ::= tca OPERACION tcc 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = e; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(8/*VECTOR2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VECTOR ::= 
            {
              Object RESULT = null;
		 RESULT = new VECTOR(new Entero("0"), new Entero("0") ); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(7/*VECTOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VECTOR ::= tca OPERACION tcc VECTOR2 
            {
              Object RESULT = null;
		int d1left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object d1 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object d2 = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = new VECTOR((Instruccion)d1, (Instruccion)d2 ); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(7/*VECTOR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARA_VAR2 ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList<Instruccion>(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(6/*DECLARA_VAR2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARA_VAR2 ::= tcoma tiden VECTOR DECLARA_VAR2 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 DeclaraVariable2 var2 = new DeclaraVariable2((String)id, (Instruccion)vec); 
                    ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)var2); 
                    RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(6/*DECLARA_VAR2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARA_VAR ::= tvar tiden VECTOR DECLARA_VAR2 tas TIPO 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-4)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 DeclaraVariable2 var2 = new DeclaraVariable2((String)id, (Instruccion)vec); 
                    ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)var2);  
                    DeclaraVariable var = new DeclaraVariable(nombreArchivo, nvl, lista, (String)tipo, "fun");
                    RESULT = var; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(5/*DECLARA_VAR*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= VARIABLE VECTOR tigual VALOR 
            {
              Object RESULT = null;
		int vtleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left;
		int vtright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).right;
		Object vt = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 VariableThis varthis = (VariableThis)vt; Variable var = new Variable(nombreArchivo, "fun", varthis.id, varthis.isThis, (Instruccion)vec, nvl, vtleft, vtright); RESULT = new Asignacion(nombreArchivo, "fun", var, (Instruccion)val, nvl, vtleft, vtright ); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(20/*ASIGNACION*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RETURN ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(18/*RETURN*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RETURN ::= treturn VALOR tpuntocoma 
            {
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 RESULT = v; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(18/*RETURN*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARA_ARGS2 ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList<DeclaraArgs>(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(17/*DECLARA_ARGS2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARA_ARGS2 ::= tcoma TIPO tiden DECLARA_ARGS2 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 DeclaraArgs da = new DeclaraArgs((String)t, (String)id); ArrayList<DeclaraArgs> lista = (ArrayList<DeclaraArgs>)l; lista.add(0,da); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(17/*DECLARA_ARGS2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARA_ARGS ::= 
            {
              Object RESULT = null;
		 RESULT = null; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(16/*DECLARA_ARGS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARA_ARGS ::= TIPO tiden DECLARA_ARGS2 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 DeclaraArgs da = new DeclaraArgs((String)t, (String)id); ArrayList<DeclaraArgs> lista = (ArrayList<DeclaraArgs>)l; lista.add(0,da); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(16/*DECLARA_ARGS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARA_FUNCION ::= TIPO tiden VECTOR tpa DECLARA_ARGS tpc tla INSTRUCCIONESLOW RETURN tlc 
            {
              Object RESULT = null;
		int tileft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-9)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-9)).right;
		Object ti = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-8)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-8)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).right;
		Object vec = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-7)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).right;
		Object ld = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).value;
		int lileft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int reright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object re = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		 DeclaraFuncion df = new DeclaraFuncion(nombreArchivo, "fun", (String)ti, (String)id, (Instruccion)vec, (ArrayList<DeclaraArgs>)ld, (ArrayList<Instruccion>)li, (Instruccion)re ); RESULT = df; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(15/*DECLARA_FUNCION*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-9)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCIONESLOW ::= 
            {
              Object RESULT = null;
		 RESULT = new ArrayList<Instruccion>(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCIONESLOW ::= CALL tpuntocoma INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)e); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCIONESLOW ::= IMPRIMIR tpuntocoma INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)e); Instruccion test = (Instruccion)e; RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCIONESLOW ::= SWITCH INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 RESULT = l; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCIONESLOW ::= WHILE INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)e); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCIONESLOW ::= FOR INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)e); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCIONESLOW ::= IF INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)e); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCIONESLOW ::= ASIGNACION tpuntocoma INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)e); Instruccion test = (Instruccion)e; RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCIONESLOW ::= DECLARA_VAR tpuntocoma INSTRUCCIONESLOW 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
		 ArrayList<Instruccion> lista = (ArrayList<Instruccion>)l; lista.add(0,(Instruccion)e); RESULT = lista; 
              CUP$FunParser$result = new java_cup.runtime.Symbol(14/*INSTRUCCIONESLOW*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCIONES ::= 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(13/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCIONES ::= ASIGNACION tpuntocoma NT$2 INSTRUCCIONES 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;

              CUP$FunParser$result = new java_cup.runtime.Symbol(13/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$2 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
 Instruccion asigna = (Instruccion)e; asigna.operar(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(52/*NT$2*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCIONES ::= DECLARA_FUNCION NT$1 INSTRUCCIONES 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;

              CUP$FunParser$result = new java_cup.runtime.Symbol(13/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$1 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).value;
 Instruccion declaraF = (Instruccion)e; declaraF.operar(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(51/*NT$1*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCIONES ::= DECLARA_VAR tpuntocoma NT$0 INSTRUCCIONES 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).value;

              CUP$FunParser$result = new java_cup.runtime.Symbol(13/*INSTRUCCIONES*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$0 ::= 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
 Instruccion declaraV = (Instruccion)e; declaraV.operar(); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(50/*NT$0*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // IMPORTS ::= 
            {
              Object RESULT = null;
		 System.out.println("No hay imports"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(4/*IMPORTS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // IMPORTS ::= tuse tiden tpunto tfun tpuntocoma IMPORTS 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(4/*IMPORTS*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-5)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABECERA ::= tnombre tdel tarchivo tdospuntos tiden tpunto tfun 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).value;
		 System.out.println("El nombre del archivo es " + (String)e); nombreArchivo = (String)e; Metodos.addArchivo(nombreArchivo, "fun"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(3/*CABECERA*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUERPO ::= CABECERA IMPORTS INSTRUCCIONES 
            {
              Object RESULT = null;

              CUP$FunParser$result = new java_cup.runtime.Symbol(2/*CUERPO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CUERPO 
            {
              Object RESULT = null;
		 System.out.println("Fin"); 
              CUP$FunParser$result = new java_cup.runtime.Symbol(1/*INICIO*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          return CUP$FunParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).value;
		RESULT = start_val;
              CUP$FunParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$FunParser$stack.elementAt(CUP$FunParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$FunParser$parser.done_parsing();
          return CUP$FunParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

